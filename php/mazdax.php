<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\mazdax as Exchange;

class mazdax extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'mazdax',
            'name' => 'Mazdax',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => false,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'otc' => true,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'Mazdax OTC Exchange',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/mazdax/64x64.png',
                'api' => array(
                    'public' => 'https://api.mazdax.ir',
                ),
                'www' => 'https://mazdax.ir',
                'doc' => array(
                    'https://api.mazdax.ir',
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '1d' => '1d',
                '1w' => '1w',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'market/symbols' => 1,
                        'market/rollingprice' => 1,
                        'market/candle' => 1,
                        'market/order' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): array {
        /**
         * retrieves data on all markets for mazdax
         * @see https://api.mazdax.ir/market/symbols
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $response = $this->publicGetMarketSymbols ($params);
        // Response is an array of $market objects:
        // array(
        //   {
        //     "id" => 67,
        //     "createdAt" => "2022-12-26T07:33:25Z",
        //     "updatedAt" => "2025-07-04T16:18:57Z",
        //     "order" => 2,
        //     "symbol" => "AHRM1IRR",
        //     "baseAsset" => "AHRM1",
        //     "baseAssetTranslate" => "AHRM1",
        //     "baseAssetPrecision" => 0,
        //     "quoteAsset" => "IRR",
        //     "quoteAssetTranslate" => "IRR",
        //     "takerFee" => "0.00116",
        //     "makerFee" => "0.001044",
        //     "quoteAssetPrecision" => 0,
        //     "isTradable" => true,
        //     "isActive" => true,
        //     "isPublic" => true,
        //     "minimumOrderSize" => "100000",
        //     "maximumOrderSize" => "0",
        //     "minimumPrice" => "0",
        //     "maximumPrice" => "0",
        //     "marketCOV" => "0.01",
        //     "marketCap" => "10",
        //     "tickSize" => "1",
        //     "stepSize" => "1",
        //     ...
        //   }
        // )
        $result = array();
        for ($i = 0; $i < count($response); $i++) {
            $market = $this->parse_market($response[$i]);
            $result[] = $market;
        }
        return $result;
    }

    public function parse_market($market): array {
        //  {
        //    "id" => 67,
        //    "createdAt" => "2022-12-26T07:33:25Z",
        //    "updatedAt" => "2025-07-04T16:18:57Z",
        //    "order" => 2,
        //    "symbol" => "AHRM1IRR",
        //    "baseAsset" => "AHRM1",
        //    "baseAssetTranslate" => "AHRM1",
        //    "baseAssetPrecision" => 0,
        //    "quoteAsset" => "IRR",
        //    "quoteAssetTranslate" => "IRR",
        //    "takerFee" => "0.00116",
        //    "makerFee" => "0.001044",
        //    "quoteAssetPrecision" => 0,
        //    "isTradable" => true,
        //    "isActive" => true,
        //    "isPublic" => true,
        //    "minimumOrderSize" => "100000",
        //    "maximumOrderSize" => "0",
        //    "minimumPrice" => "0",
        //    "maximumPrice" => "0",
        //    "marketCOV" => "0.01",
        //    "marketCap" => "10",
        //    "tickSize" => "1",
        //    "stepSize" => "1",
        //    ...
        //  }
        $id = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'baseAsset');
        $quoteId = $this->safe_string($market, 'quoteAsset');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        $isActive = $this->safe_bool($market, 'isActive', false);
        $isTradable = $this->safe_bool($market, 'isTradable', false);
        $active = $isActive && $isTradable;
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'otc',
            'spot' => false,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => $active,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $this->parse_number($this->parse_precision($this->safe_string($market, 'baseAssetPrecision'))),
                'price' => $this->parse_number($this->parse_precision($this->safe_string($market, 'quoteAssetPrecision'))),
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'minimumOrderSize'),
                    'max' => $this->safe_number($market, 'maximumOrderSize'),
                ),
                'price' => array(
                    'min' => $this->safe_number($market, 'minimumPrice'),
                    'max' => $this->safe_number($market, 'maximumPrice'),
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => $this->parse8601($this->safe_string($market, 'createdAt')),
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple $markets, statistical information calculated over the past 24 hours for each $market
         * @see https://api.mazdax.ir/market/rollingprice
         * @param {string[]|null} $symbols unified $symbols of the $markets to fetch the $ticker for, all $market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        if ($symbols !== null) {
            $symbols = $this->market_symbols($symbols);
        }
        $markets = $this->fetch_markets();
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $markets[$i];
            $marketId = $market['id'];
            $request = array(
                'from' => 'mazdax',
                'symbol' => $marketId,
            );
            try {
                $response = $this->publicGetMarketRollingprice ($request);
                // {
                //   "AHRM1IRR" => {
                //     "symbol" => "AHRM1IRR",
                //     "priceChange" => "525",
                //     "priceChangePercent" => "2.077",
                //     "weightedAvgPrice" => "0",
                //     "prevClosePrice" => "0",
                //     "lastPrice" => "25800",
                //     "lastQty" => "14050",
                //     "bidPrice" => "0",
                //     "askPrice" => "0",
                //     "openPrice" => "25275",
                //     "highPrice" => "26200",
                //     "lowPrice" => "25274",
                //     "volume" => "1076873",
                //     "valueIrr" => "55104642690",
                //     "openTime" => 1760271737577,
                //     "closeTime" => 1760351215075,
                //     "count" => 348
                //   }
                // }
                $tickerData = $this->safe_dict($response, $marketId);
                if ($tickerData !== null) {
                    $ticker = $this->parse_ticker($tickerData, $market);
                    $symbol = $ticker['symbol'];
                    $result[$symbol] = $ticker;
                }
            } catch (Exception $e) {
                // Skip $markets that fail
                continue;
            }
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @see https://api.mazdax.ir/market/rollingprice
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'from' => 'mazdax',
            'symbol' => $market['id'],
        );
        $response = $this->publicGetMarketRollingprice ($request);
        // {
        //   "AHRM1IRR" => {
        //     "symbol" => "AHRM1IRR",
        //     "priceChange" => "525",
        //     "priceChangePercent" => "2.077",
        //     "weightedAvgPrice" => "0",
        //     "prevClosePrice" => "0",
        //     "lastPrice" => "25800",
        //     "lastQty" => "14050",
        //     "bidPrice" => "0",
        //     "askPrice" => "0",
        //     "openPrice" => "25275",
        //     "highPrice" => "26200",
        //     "lowPrice" => "25274",
        //     "volume" => "1076873",
        //     "valueIrr" => "55104642690",
        //     "openTime" => 1760271737577,
        //     "closeTime" => 1760351215075,
        //     "count" => 348
        //   }
        // }
        $tickerData = $this->safe_dict($response, $market['id']);
        return $this->parse_ticker($tickerData, $market);
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        //   "symbol" => "AHRM1IRR",
        //   "priceChange" => "525",
        //   "priceChangePercent" => "2.077",
        //   "weightedAvgPrice" => "0",
        //   "prevClosePrice" => "0",
        //   "lastPrice" => "25800",
        //   "lastQty" => "14050",
        //   "bidPrice" => "0",
        //   "askPrice" => "0",
        //   "openPrice" => "25275",
        //   "highPrice" => "26200",
        //   "lowPrice" => "25274",
        //   "volume" => "1076873",
        //   "valueIrr" => "55104642690",
        //   "openTime" => 1760271737577,
        //   "closeTime" => 1760351215075,
        //   "count" => 348
        // }
        $marketType = 'otc';
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $timestamp = $this->safe_integer($ticker, 'closeTime');
        $high = $this->safe_string($ticker, 'highPrice');
        $low = $this->safe_string($ticker, 'lowPrice');
        $bid = $this->safe_string($ticker, 'bidPrice');
        $ask = $this->safe_string($ticker, 'askPrice');
        $last = $this->safe_string($ticker, 'lastPrice');
        $open = $this->safe_string($ticker, 'openPrice');
        $baseVolume = $this->safe_string($ticker, 'volume');
        $quoteVolume = $this->safe_string($ticker, 'valueIrr');
        $priceChange = $this->safe_string($ticker, 'priceChange');
        $percentage = $this->safe_string($ticker, 'priceChangePercent');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $priceChange,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1d', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the $open, $high, $low, and $close price, and the $volume of a $market
         * @see https://api.mazdax.ir/market/candle
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each $candle represents
         * @param {int} [$since] $timestamp in ms of the earliest $candle to fetch
         * @param {int} [$limit] the maximum amount of $candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int[][]} A list of $candles ordered, $open, $high, $low, $close, $volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $endTime = Date.now ();
        $request = array(
            'from' => 'binance',
            'symbol' => $market['id'],
            'interval' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            'limit' => $limit !== null ? $limit : 1000,
            'starttime' => ($endTime) - (30 * 24 * 60 * 60 * 1000), // 30 days ago
            'endtime' => $endTime,
        );
        if ($since !== null) {
            $request['starttime'] = $since / 1000;
        }
        $response = $this->publicGetMarketCandle ($request);
        // {
        //   "Candles" => array(
        //     array(
        //       "openTime" => "2021-12-20T03:30:00+03:30",
        //       "openPrice" => "10000",
        //       "highPrice" => "10000",
        //       "lowPrice" => "10000",
        //       "closePrice" => "10000",
        //       "volume" => "490000000",
        //       "closeTime" => "2021-12-20T03:30:00+03:30",
        //       "quoteAssetVolume" => "0",
        //       "numberOfTrades" => 0,
        //       "takerBuyBaseAssetVolume" => "0",
        //       "takerBuyQuoteAssetVolume" => "0",
        //       "ignore" => "0"
        //     ),
        //     ...
        //   )
        // }
        $candles = $this->safe_list($response, 'Candles', array());
        $ohlcvs = array();
        for ($i = 0; $i < count($candles); $i++) {
            $candle = $candles[$i];
            $timestamp = $this->parse8601($this->safe_string($candle, 'openTime'));
            $open = $this->safe_string($candle, 'openPrice');
            $high = $this->safe_string($candle, 'highPrice');
            $low = $this->safe_string($candle, 'lowPrice');
            $close = $this->safe_string($candle, 'closePrice');
            $volume = $this->safe_string($candle, 'volume');
            $ohlcvs[] = array(
                $timestamp,
                $open,
                $high,
                $low,
                $close,
                $volume,
            );
        }
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data
         * @see https://api.mazdax.ir/market/order
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'from' => 'mazdax',
            'symbol' => $market['id'],
            'limit' => $limit !== null ? $limit : 25,
        );
        $response = $this->publicGetMarketOrder ($request);
        // {
        //   "timestamp" => "0001-01-01T00:00:00Z",
        //   "bids" => [
        //     ["25321", "9344"],
        //     ["25320", "15000"],
        //     ...
        //   ],
        //   "asks" => [
        //     ["26190", "5341"],
        //     ["26195", "2310"],
        //     ...
        //   ]
        // }
        $timestamp = $this->parse8601($this->safe_string($response, 'timestamp'));
        return $this->parse_order_book($response, $symbol, $timestamp, 'bids', 'asks', 0, 1);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($query) {
            $url = $url . '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
