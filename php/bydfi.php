<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\bydfi as Exchange;

class bydfi extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'bydfi',
            'name' => 'Bydfi',
            'countries' => array( 'SC' ), // Seychelles
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/bydfi/64x64.png',
                'api' => array(
                    'public' => 'https://www.bydfi.com',
                    'quote' => 'https://quote.bydfi.pro',
                ),
                'www' => 'https://www.bydfi.com/',
                'doc' => array(
                    'https://www.bydfi.com/',
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '4h' => '240',
                '1d' => 'D',
                '1w' => 'W',
                '1M' => 'M',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'api/spot/product/list' => 1,
                        'api/tv/tradingView/history' => 1,
                    ),
                ),
                'quote' => array(
                    'get' => array(
                        'tickers' => 1,
                        'mkpai/depth-v2' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): array {
        /**
         * retrieves $data on all markets for bydfi
         * @see https://www.bydfi.com/api/spot/product/list
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market $data
         */
        $response = $this->publicGetApiSpotProductList ($params);
        $data = $this->safe_list($response, 'data', array());
        $result = array();
        for ($i = 0; $i < count($data); $i++) {
            $market = $this->parse_market($data[$i]);
            $result[] = $market;
        }
        return $result;
    }

    public function parse_market($market): array {
        // {
        //     "symbol" => "BTC_USDT",
        //     "alias" => "BTC/USDT",
        //     "baseCoin" => "BTC",
        //     "quoteCoin" => "USDT",
        //     "icon" => "https://...",
        //     "type" => 1,
        //     "tags" => "hot",
        //     "visible" => true,
        //     "anonymous" => false,
        //     "canBuy" => true,
        //     "canSell" => true,
        //     "canGrid" => true,
        //     "depth" => "0.01,0.1,1",
        //     "matchMode" => 1,
        //     "priceScale" => 2,
        //     "volumeScale" => 6,
        //     "amountScale" => 2,
        //     "makerRate" => 0.001,
        //     "takerRate" => 0.001,
        //     "feeCoin" => "USDT",
        //     "volumeMin" => 0.000001,
        //     "amountMin" => 5
        // }
        $id = $this->safe_string($market, 'symbol');
        $baseId = $this->safe_string($market, 'baseCoin');
        $quoteId = $this->safe_string($market, 'quoteCoin');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $visible = $this->safe_bool($market, 'visible', true);
        $canBuy = $this->safe_bool($market, 'canBuy', true);
        $canSell = $this->safe_bool($market, 'canSell', true);
        $active = $visible && $canBuy && $canSell;
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => $active,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => $this->safe_integer($market, 'volumeScale'),
                'price' => $this->safe_integer($market, 'priceScale'),
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => $this->safe_number($market, 'volumeMin'),
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => $this->safe_number($market, 'amountMin'),
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://quote.bydfi.pro/tickers?preHour=24
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market $tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        if ($symbols !== null) {
            $symbols = $this->market_symbols($symbols);
        }
        $request = array(
            'preHour' => 24,
        );
        $response = $this->quoteGetTickers ($this->extend($request, $params));
        $data = $this->safe_string($response, 'data', '');
        // Parse the CSV-like $response (cast to string for safety)
        $tickers = 'strval' (explode(';', $data));
        $result = array();
        for ($i = 0; $i < count($tickers); $i++) {
            $tickerStr = trim($tickers[$i]);
            if (strlen($tickerStr) === 0) {
                continue;
            }
            $ticker = $this->parse_ticker($tickerStr);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://quote.bydfi.pro/tickers?preHour=24
         * @param {string} $symbol unified $symbol of the market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $this->load_markets();
        $tickers = $this->fetch_tickers(array( $symbol ), $params);
        return $tickers[$symbol];
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // BTC_USDT, -1, 112148.56000, 121452.59000, 0.00000, 0.00000, 0.00000, 0.0000, 122518.22000, 102403.50000, 2935.7203
        // Fields:
        // 0 => $symbol (BTC_USDT)
        // 1 => trend indicator (-1 = down, 0 = neutral, 1 = up)
        // 2 => $last price
        // 3 => 24h $high
        // 4 => 24h $low
        // 5 => price $change
        // 6 => base volume (BTC)
        // 7 => price $change $percentage
        // 8 => $bid price
        // 9 => $ask price
        // 10 => 24h quote volume (USDT)
        $parts = array();
        if (gettype($ticker) === 'string') {
            $parts = explode(',', $ticker);
        } else {
            return $this->safe_ticker(array(), $market);
        }
        if (strlen($parts) < 11) {
            return $this->safe_ticker(array(), $market);
        }
        $marketType = 'spot';
        $marketId = trim($parts[0]);
        $symbol = $this->safe_symbol($marketId, $market, '_', $marketType);
        $last = $this->safe_float($parts, 2);
        $high = $this->safe_float($parts, 3);
        $low = $this->safe_float($parts, 4);
        $change = $this->safe_float($parts, 5);
        $baseVolume = $this->safe_float($parts, 6);
        $percentage = $this->safe_float($parts, 7);
        $bid = $this->safe_float($parts, 8);
        $ask = $this->safe_float($parts, 9);
        $quoteVolume = $this->safe_float($parts, 10);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @see https://www.bydfi.com/api/tv/tradingView/history
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $endTime = Date.now ();
        $request = array(
            'symbol' => $market['id'],
            'from' => ($endTime / 1000) - (24 * 60 * 60),
            'to' => $endTime / 1000,
            'resolution' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
        );
        if ($since !== null) {
            $request['from'] = $since / 1000;
        }
        $request['from'] = $this->safe_integer($request, 'from');
        $request['to'] = $this->safe_integer($request, 'to');
        if ($timeframe !== null) {
            $request['resolution'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
        }
        $response = $this->publicGetApiTvTradingViewHistory ($request);
        $openList = $this->safe_list($response, 'o', array());
        $highList = $this->safe_list($response, 'h', array());
        $lowList = $this->safe_list($response, 'l', array());
        $closeList = $this->safe_list($response, 'c', array());
        $volumeList = $this->safe_list($response, 'v', array());
        $timestampList = $this->safe_list($response, 't', array());
        $ohlcvs = array();
        for ($i = 0; $i < count($openList); $i++) {
            $ohlcvs[] = array(
                $this->safe_integer($timestampList, $i),
                $this->safe_float($openList, $i),
                $this->safe_float($highList, $i),
                $this->safe_float($lowList, $i),
                $this->safe_float($closeList, $i),
                $this->safe_float($volumeList, $i),
            );
        }
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function fetch_order_book(string $symbol, ?int $limit = 1, $params = array ()): array {
        /**
         * fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other $data
         * @see https://quote.bydfi.pro/mkpai/depth-v2
         * @param {string} $symbol unified $symbol of the $market to fetch the order book for
         * @param {int} [$limit] the maximum amount of order book entries to return
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} A dictionary of ~@link https://docs.ccxt.com/#/?id=order-book-structure order book structures~ indexed by $market symbols
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $request = array(
            'businessType' => $market['id'],
            'dType' => 0,
        );
        if ($limit !== null) {
            $request['size'] = $limit;
        }
        $response = $this->quoteGetMkpaiDepthV2 ($request);
        $data = $this->safe_dict($response, 'data', array());
        $timestamp = Date.now ();
        $orderbook = $this->parse_order_book($data, $symbol, $timestamp, 'bids', 'asks', 'price', 'amount');
        return $orderbook;
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = '';
        if ($api === 'quote') {
            $url = $this->urls['api']['quote'] . '/' . $path;
        } else {
            $url = $this->urls['api']['public'] . '/' . $path;
        }
        if ($query) {
            $url .= '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
