<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\pingi as Exchange;

class pingi extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'pingi',
            'name' => 'Pingi',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => false,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'Pingi SPOT Exchange',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/pingi/64x64.png',
                'api' => array(
                    'public' => 'https://api5.pingi.co/trading',
                ),
                'www' => 'https://pingi.co',
                'doc' => array(
                    'https://pingi.co',
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '5m' => '5',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '4h' => '240',
                '1d' => '1D',
                '1w' => '1W',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'market/prices' => 1,
                        'udf/history' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): array {
        /**
         * retrieves $data on all markets for pingi
         * @see https://api5.pingi.co/trading/market/prices/
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market $data
         */
        $response = $this->publicGetMarketPrices ($params);
        // Response structure:
        // {
        //   "statusCode" => 200,
        //   "ok" => true,
        //   "data" => {
        //     "ETH_USDT" => array(
        //       "market" => "ETH_USDT",
        //       "marketId" => 6,
        //       "marketVolume" => "128889.02937760774364521500000000",
        //       "currentPrice" => "4083.7744580000000",
        //       "maxPrice" => "4218.0241700000000",
        //       "minPrice" => "3786.9124050000000",
        //       "startPrice" => "3830.5800220000000",
        //       "marketPlatform" => 0
        //     ),
        //     "BTC_IRT" => array(
        //       "market" => "BTC_IRT",
        //       "marketId" => 8,
        //       "marketVolume" => "27140908320.17800246693400000000000000",
        //       "currentPrice" => "12909088630.0000000000000",
        //       "maxPrice" => "13213902170.0000000000000",
        //       "minPrice" => "12000000000.0000000000000",
        //       "startPrice" => "12752332240.0000000000000",
        //       "marketPlatform" => 0
        //     ),
        //     ...
        //   }
        // }
        $data = $this->safe_dict($response, 'data', array());
        $marketKeys = is_array($data) ? array_keys($data) : array();
        $result = array();
        for ($i = 0; $i < count($marketKeys); $i++) {
            $marketId = $marketKeys[$i];
            $marketData = $data[$marketId];
            $market = $this->parse_market($marketData);
            $result[] = $market;
        }
        return $result;
    }

    public function parse_market($market): array {
        //  {
        //    "market" => "BTC_IRT",
        //    "marketId" => 8,
        //    "marketVolume" => "27140908320.17800246693400000000000000",
        //    "currentPrice" => "12909088630.0000000000000",
        //    "maxPrice" => "13213902170.0000000000000",
        //    "minPrice" => "12000000000.0000000000000",
        //    "startPrice" => "12752332240.0000000000000",
        //    "marketPlatform" => 0
        //  }
        $id = $this->safe_string($market, 'market');
        $parts = explode('_', $id);
        $baseId = $this->safe_string($parts, 0);
        $quoteId = $this->safe_string($parts, 1);
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => false,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://api5.pingi.co/trading/market/prices/
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        if ($symbols !== null) {
            $symbols = $this->market_symbols($symbols);
        }
        $response = $this->publicGetMarketPrices ($params);
        // Response structure:
        // {
        //   "statusCode" => 200,
        //   "ok" => true,
        //   "data" => {
        //     "ETH_USDT" => array(
        //       "market" => "ETH_USDT",
        //       "marketId" => 6,
        //       "marketVolume" => "128889.02937760774364521500000000",
        //       "currentPrice" => "4083.7744580000000",
        //       "maxPrice" => "4218.0241700000000",
        //       "minPrice" => "3786.9124050000000",
        //       "startPrice" => "3830.5800220000000",
        //       "marketPlatform" => 0
        //     ),
        //     ...
        //   }
        // }
        $data = $this->safe_dict($response, 'data', array());
        $marketKeys = is_array($data) ? array_keys($data) : array();
        $result = array();
        for ($i = 0; $i < count($marketKeys); $i++) {
            $marketId = $marketKeys[$i];
            $marketData = $data[$marketId];
            $ticker = $this->parse_ticker($marketData);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
         * @see https://api5.pingi.co/trading/market/prices/
         * @param {string} $symbol unified $symbol of the $market to fetch the ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structure~
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $response = $this->publicGetMarketPrices ($params);
        // Response structure:
        // {
        //   "statusCode" => 200,
        //   "ok" => true,
        //   "data" => {
        //     "BTC_IRT" => array(
        //       "market" => "BTC_IRT",
        //       "marketId" => 8,
        //       "marketVolume" => "27140908320.17800246693400000000000000",
        //       "currentPrice" => "12909088630.0000000000000",
        //       "maxPrice" => "13213902170.0000000000000",
        //       "minPrice" => "12000000000.0000000000000",
        //       "startPrice" => "12752332240.0000000000000",
        //       "marketPlatform" => 0
        //     ),
        //     ...
        //   }
        // }
        $data = $this->safe_dict($response, 'data', array());
        $tickerData = $this->safe_dict($data, $market['id']);
        return $this->parse_ticker($tickerData, $market);
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        //   "market" => "BTC_IRT",
        //   "marketId" => 8,
        //   "marketVolume" => "27140908320.17800246693400000000000000",
        //   "currentPrice" => "12909088630.0000000000000",
        //   "maxPrice" => "13213902170.0000000000000",
        //   "minPrice" => "12000000000.0000000000000",
        //   "startPrice" => "12752332240.0000000000000",
        //   "marketPlatform" => 0
        // }
        $marketType = 'spot';
        $marketId = $this->safe_string($ticker, 'market');
        $symbol = $this->safe_symbol($marketId, $market, '_', $marketType);
        $last = $this->safe_string($ticker, 'currentPrice');
        $high = $this->safe_string($ticker, 'maxPrice');
        $low = $this->safe_string($ticker, 'minPrice');
        $open = $this->safe_string($ticker, 'startPrice');
        $baseVolume = $this->safe_string($ticker, 'marketVolume');
        // Calculate $change and $percentage
        $change = null;
        $percentage = null;
        if ($open !== null && $last !== null) {
            $openNum = $this->parse_number($open);
            $lastNum = $this->parse_number($last);
            if ($openNum !== null && $lastNum !== null && $openNum > 0) {
                $change = $this->parse_number($this->number_to_string($lastNum - $openNum));
                $percentage = $this->parse_number($this->number_to_string(($lastNum - $openNum) / $openNum * 100));
            }
        }
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1d', ?int $since = null, ?int $limit = null, $params = array ()): array {
        /**
         * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
         * @see https://api5.pingi.co/trading/udf/history/
         * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
         * @param {string} $timeframe the length of time each candle represents
         * @param {int} [$since] timestamp in ms of the earliest candle to fetch
         * @param {int} [$limit] the maximum amount of candles to fetch
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {int[][]} A list of candles ordered, open, high, low, close, volume
         */
        $this->load_markets();
        $market = $this->market($symbol);
        $endTime = Date.now ();
        $request = array(
            'symbol' => $market['base'] . '/' . $market['quote'],
            'resolution' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            'from' => ($endTime / 1000) - (30 * 24 * 60 * 60), // 30 days ago
            'to' => $endTime / 1000,
        );
        if ($since !== null) {
            $request['from'] = $since / 1000;
        }
        $request['from'] = $this->safe_integer($request, 'from');
        $request['to'] = $this->safe_integer($request, 'to');
        $response = $this->publicGetUdfHistory ($request);
        // Response structure:
        // {
        //   "c" => [12710726290.0, 12732737270.0, ...],  // close prices
        //   "v" => [0.015461630724, 0.024055443184, ...], // volumes
        //   "l" => [12702815580.0, 12689256670.0, ...],  // low prices
        //   "h" => [12723701120.0, 12752332240.0, ...],  // high prices
        //   "o" => [12752332240.0, 12710726290.0, ...],  // open prices
        //   "t" => [1760271600, 1760272500, ...]         // timestamps
        // }
        $closeList = $this->safe_list($response, 'c', array());
        $volumeList = $this->safe_list($response, 'v', array());
        $lowList = $this->safe_list($response, 'l', array());
        $highList = $this->safe_list($response, 'h', array());
        $openList = $this->safe_list($response, 'o', array());
        $timestampList = $this->safe_list($response, 't', array());
        $ohlcvs = array();
        for ($i = 0; $i < count($openList); $i++) {
            $ohlcvs[] = array(
                $this->safe_timestamp($timestampList, $i),
                $this->safe_number($openList, $i),
                $this->safe_number($highList, $i),
                $this->safe_number($lowList, $i),
                $this->safe_number($closeList, $i),
                $this->safe_number($volumeList, $i),
            );
        }
        return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($path === 'market/prices') {
            $url = $url . '/';
        }
        if ($path === 'udf/history') {
            $url = $url . '/?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
