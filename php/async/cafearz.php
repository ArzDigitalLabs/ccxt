<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\cafearz as Exchange;
use \React\Async;
use \React\Promise\PromiseInterface;

class cafearz extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'cafearz',
            'name' => 'Cafearz',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'otc' => true,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/cafearz/64x64.png',
                'api' => array(
                    'public' => 'https://api2.cafearz.com',
                ),
                'www' => 'https://cafearz.com/',
                'doc' => array(
                    'https://cafearz.com/',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        '/api/client/v1/currencies/prices/digital' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function parse_market($market): array {
        // {
        //     "symbol" => "BTC",
        //     "name" => "Bitcoin",
        //     "title" => "بیت کوین",
        //     "service_id" => 14,
        //     "rank" => 1,
        //     "price" => array(
        //         "buy" => 12726581792.3999996185302734375,
        //         "sell" => 12571941095.936672210693359375,
        //         "dollar" => 110387.5599999999976716935634613037109375
        //     ),
        //     "chart" => array(
        //         "changes" => "down",
        //         "changes_percentage" => 107.0799999999999982946974341757595539093017578125,
        //         "data" => array(
        //             "1404/07/05" => "109643.46000000",
        //             "1404/07/06" => "109635.85000000",
        //             "1404/07/07" => "112163.95000000",
        //             "1404/07/08" => "114311.96000000",
        //             "1404/07/09" => "114048.93000000",
        //             "1404/07/10" => "118594.99000000",
        //             "1404/07/11" => "120529.35000000",
        //             "1404/07/12" => "122232.00000000",
        //             "1404/07/13" => "122391.00000000",
        //             "1404/07/14" => "123482.31000000",
        //             "1404/07/15" => "124658.54000000",
        //             "1404/07/16" => "121332.95000000",
        //             "1404/07/17" => "123306.00000000",
        //             "1404/07/18" => "121662.40000000",
        //             "1404/07/19" => "113613.18000000"
        //         }
        //     ),
        //     "decimal_digit" => "5",
        //     "market_cap" => 2018807729876.182861328125,
        //     "volume_24h" => 57479298399.76000213623046875,
        //     "percent_change_1h" => 0.00643466000000000003244959856374407536350190639495849609375,
        //     "percent_change_24h" => -3.013435680000000171929741554777137935161590576171875,
        //     "percent_change_7d" => -3.848675339999999778228811919689178466796875,
        //     "base_icon" => "https://api2.cafearz.com/assets/images/coins/1.png",
        //     "icon" => "https://storage.cafearz.com/wp-content/uploads/coins/BTC.png"
        // ),
        $baseId = $this->safe_string($market, 'symbol');
        $quoteId = 'IRT';
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $id = $baseId . '/' . $quoteId;
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => false,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for cafearz
             * @see https://api2.cafearz.com/api/client/v1/currencies/prices/digital
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetApiClientV1CurrenciesPricesDigital ($params));
            $result = array();
            $prices = $this->safe_dict($response, 'prices', array());
            $symbols = is_array($prices) ? array_keys($prices) : array();
            // Create markets for each symbol with IRT quote
            for ($i = 0; $i < count($symbols); $i++) {
                $market = $this->parse_market($prices[$symbols[$i]]);
                $result[] = $market;
            }
            return $result;
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://api2.cafearz.com/api/client/v1/currencies/prices/digital
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetApiClientV1CurrenciesPricesDigital ($params));
            $prices = $this->safe_dict($response, 'prices', array());
            $result = array();
            $coinSymbols = is_array($prices) ? array_keys($prices) : array();
            for ($i = 0; $i < count($coinSymbols); $i++) {
                $baseId = $coinSymbols[$i];
                $coinData = $prices[$baseId];
                // Create $ticker for IRT $quote
                $quoteId = 'IRT';
                $base = $this->safe_currency_code($baseId);
                $quote = $this->safe_currency_code($quoteId);
                $symbol = $base . '/' . $quote;
                $ticker = $this->extend(array(
                    'symbol' => $symbol,
                    'baseId' => $baseId,
                    'quoteId' => $quoteId,
                    'id' => $baseId . '/' . $quoteId,
                ), $coinData);
                $result[$symbol] = $this->parse_ticker($ticker);
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @see https://api2.cafearz.com/api/client/v1/currencies/prices/digital
             * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            $ticker = Async\await($this->fetch_tickers(array( $symbol )));
            return $ticker[$symbol];
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        //     "symbol" => "BTC",
        //     "name" => "Bitcoin",
        //     "title" => "بیت کوین",
        //     "service_id" => 14,
        //     "rank" => 1,
        //     "price" => array(
        //         "buy" => 13462469875.799999,
        //         "sell" => 13298881860,
        //         "dollar" => 117689.22
        //     ),
        //     "chart" => array(
        //         "changes" => "down",
        //         "changes_percentage" => 101.33,
        //         "data" => array(...)
        //     ),
        //     "decimal_digit" => "5",
        //     "market_cap" => 2018807729876.182861,
        //     "volume_24h" => 57479298399.76,
        //     "percent_change_1h" => 0.00643466,
        //     "percent_change_24h" => -3.013435,
        //     "percent_change_7d" => -3.848675,
        //     "base_icon" => "...",
        //     "icon" => "..."
        // }
        $marketType = 'otc';
        $marketId = $this->safe_string($ticker, 'id');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $priceData = $this->safe_dict($ticker, 'price', array());
        $last = $this->safe_float($priceData, 'buy', 0);
        $bid = $this->safe_float($priceData, 'sell', 0);
        $ask = $this->safe_float($priceData, 'buy', 0);
        $percentage = $this->safe_float($ticker, 'percent_change_24h', 0);
        $baseVolume = $this->safe_float($ticker, 'volume_24h');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => null,
            'low' => null,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['public'] . $path;
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
