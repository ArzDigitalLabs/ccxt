<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\kcex as Exchange;
use \React\Async;
use \React\Promise\PromiseInterface;

class kcex extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'kcex',
            'name' => 'Kcex',
            'countries' => array( 'SC' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => true,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/kcex/64x64.png',
                'api' => array(
                    'public' => 'https://www.kcex.com/spot/api',
                ),
                'www' => 'https://www.kcex.com',
                'doc' => array(
                    'https://www.kcex.com',
                ),
            ),
            'timeframes' => array(
                '1m' => '1',
                '1h' => '60',
                '3h' => '180',
                '6h' => '360',
                '12h' => '720',
                '1d' => '1D',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'market-2/spot/market/v2/web/symbols' => 1,
                        'market-2/spot/market/v2/web/tickers' => 1,
                        'market-2/spot/market/v2/web/symbol/ticker' => 1,
                    ),
                ),
            ),
            // 'fees' => array(
            //     'trading' => array(
            //         'tierBased' => false,
            //         'percentage' => true,
            //         'maker' => $this->parse_number('0.001'),
            //         'taker' => $this->parse_number('0.001'),
            //     ),
            // ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves $data on all markets for kcex
             * @see https://api-docs.kcex.ir/#be8d9c51a2
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market $data
             */
            $response = Async\await($this->publicGetMarket2SpotMarketV2WebSymbols ($params));
            $data = $this->safe_dict($response, 'data');
            $USDTmarketList = $this->safe_list($data, 'USDT');
            $USDCmarketList = $this->safe_list($data, 'USDC');
            $marketList = $this->array_concat($USDTmarketList, $USDCmarketList);
            $result = array();
            for ($i = 0; $i < count($marketList); $i++) {
                $market = $this->parse_market($marketList[$i]);
                $result[] = $market;
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        //         {
        // $id => "e16a2713c7a44bac9d1d4ef98467e75b",
        // mcd => "20f24a571c8544c0b1362794b1804456",
        // mnm => "USDT",
        // cd => "18f40e5428054a4b9c69ddb0cce486f3",
        // vn => "AP",
        // fn => "AMERICA PARTY",
        // srt => 322,
        // sts => 1,
        // in => "F20250607111147267iXgSHIElFbibIQ",
        // fot => 1749247200000,
        // ot => 1749267000000,
        // cp => array(
        // "common_section_meme",
        // "common_section_solana"
        // ),
        // ps => 7,
        // qs => 2,
        // cdm => 1
        // }
        $id = $this->safe_string($market, 'id');
        $baseId = $this->safe_string($market, 'vn');
        $quoteId = $this->safe_string($market, 'mnm');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price $tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @see https://api-docs.kcex.ir/#be8d9c51a2
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market $tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?$id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetMarket2SpotMarketV2WebTickers ($params));
            $tickers = $this->safe_list($response, 'data');
            $timestamp = $this->safe_integer($response, 'timestamp');
            $result = array();
            $idToMarket = array();
            $marketList = is_array($this->markets) ? array_values($this->markets) : array();
            for ($i = 0; $i < count($marketList); $i++) {
                $market = $marketList[$i];
                $idToMarket[$market['id']] = $market;
            }
            for ($i = 0; $i < count($tickers); $i++) {
                $ticker = $tickers[$i];
                $id = $this->safe_string($ticker, 'id');
                $market = $idToMarket[$id];
                $ticker['timestamp'] = $timestamp;
                if ($market !== null) {
                    $parsedTicker = $this->parse_ticker($ticker, $market);
                    $symbol = $parsedTicker['symbol'];
                    $result[$symbol] = $parsedTicker;
                }
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://api-docs.kcex.ir/#be8d9c51a2
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['base'] . '_' . $market['quote'],
            );
            $response = Async\await($this->publicGetMarket2SpotMarketV2WebSymbolTicker ($request));
            $tickerdata = $this->safe_dict($response, 'data');
            $ticker = $this->parse_ticker($tickerdata, $market);
            return $ticker;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //         {
        // id => "e16a2713c7a44bac9d1d4ef98467e75b",
        // r8 => "-0.0261",
        // tzr => "-0.0261",
        // c => "0.0004552",
        // h => "0.0005745",
        // l => "0.0004552",
        // a => "136545.934217",
        // q => "281221205.24",
        // o => "0.0004674",
        // ot => 1749247200000
        // }
        $symbol = $market['symbol'];
        $high = $this->safe_float($ticker, 'h', 0);
        $low = $this->safe_float($ticker, 'l', 0);
        $open = $this->safe_float($ticker, 'o', 0);
        $last = $this->safe_float($ticker, 'c', 0);
        $quoteVolume = $this->safe_float($ticker, 'a', 0);
        $baseVolume = $this->safe_float($ticker, 'q', 0);
        $timestamp = $this->safe_integer($ticker, 'timestamp', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'high' => $high,
            'low' => $low,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($path === 'market-2/spot/market/v2/web/symbol/ticker') {
            $url = $url . '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
