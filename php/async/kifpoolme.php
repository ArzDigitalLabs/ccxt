<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\kifpoolme as Exchange;
use \React\Async;
use \React\Promise\PromiseInterface;

class kifpoolme extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'kifpoolme',
            'name' => 'Kifpool',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/kifpoolme/64x64.png',
                'api' => array(
                    'public' => 'https://api.kifpool.app',
                ),
                'www' => 'https://kifpool.me/',
                'doc' => array(
                    'https://kifpool.me/',
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '4h' => '4h',
                '1d' => '1d',
                '1w' => '1w',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'api/spot/price' => 1,
                        'api/spot/tickers/1m' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function parse_market($market): array {
        // {
        //     "symbol" => "BTC",
        //     "faName" => "بیت کوین",
        //     "name" => "Bitcoin",
        //     "smallImage" => "https://kifpool.me/uploads/coin-new-images/bitcoin.png",
        //     "price" => 115430,
        //     "priceBuyIRT" => 13043590000,
        //     "priceSellIRT" => 13135934000,
        //     "volume" => 1700068128.9919832,
        //     "priceChangePercent" => 3.4799999999999995,
        //     "high" => 115968.8,
        //     "low" => 111145.4,
        //     "slug" => "bitcoin-BTC"
        // }
        $baseId = $this->safe_string($market, 'symbol');
        $quoteId = $this->safe_string($market, 'quoteId', 'USDT');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $id = $baseId . '/' . $quoteId;
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for kifpoolme
             * @see https://api.kifpool.app/api/spot/price
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetApiSpotPrice ());
            $result = array();
            // Response is an array of coin objects
            for ($i = 0; $i < count($response); $i++) {
                $item = $response[$i];
                // Create markets for both USDT and IRT $quotes
                $quotes = array( 'USDT', 'IRT' );
                for ($j = 0; $j < count($quotes); $j++) {
                    $quoteId = $quotes[$j];
                    $marketData = $this->extend($item, array(
                        'quoteId' => $quoteId,
                    ));
                    $market = $this->parse_market($marketData);
                    $result[] = $market;
                }
            }
            return $result;
        }) ();
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
             * @see https://api.kifpool.app/api/spot/price
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            // Extract $base $symbols from the requested $symbols
            $symbolsParam = null;
            if ($symbols !== null && strlen($symbols) > 0) {
                $baseSymbols = array();
                for ($i = 0; $i < count($symbols); $i++) {
                    $market = $this->market($symbols[$i]);
                    if (!(is_array($baseSymbols) && array_key_exists($market['baseId'], $baseSymbols))) {
                        $baseSymbols[] = $market['baseId'];
                    }
                }
                $symbolsParam = implode(',', $baseSymbols);
            }
            $request = array();
            if ($symbolsParam !== null) {
                $request['symbol'] = $symbolsParam;
            }
            $response = Async\await($this->publicGetApiSpotPrice ($this->extend($request)));
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $item = $response[$i];
                $baseId = $this->safe_string($item, 'symbol');
                // Create tickers for both USDT and IRT $quotes
                $quotes = array( 'USDT', 'IRT' );
                for ($j = 0; $j < count($quotes); $j++) {
                    $quoteId = $quotes[$j];
                    $base = $this->safe_currency_code($baseId);
                    $quote = $this->safe_currency_code($quoteId);
                    $symbol = $base . '/' . $quote;
                    $ticker = $this->extend($item, array(
                        'quoteId' => $quoteId,
                        'marketId' => $baseId . '/' . $quoteId,
                    ));
                    $result[$symbol] = $this->parse_ticker($ticker);
                }
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @see https://api.kifpool.app/api/spot/price
             * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            $ticker = Async\await($this->fetch_tickers(array( $symbol ), $params));
            return $ticker[$symbol];
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        //     "symbol" => "BTC",
        //     "faName" => "بیت کوین",
        //     "name" => "Bitcoin",
        //     "smallImage" => "https://kifpool.me/uploads/coin-new-images/bitcoin.png",
        //     "price" => 115430,               // USDT $price
        //     "priceBuyIRT" => 13043590000,    // IRT buy $price
        //     "priceSellIRT" => 13135934000,   // IRT sell $price
        //     "volume" => 1700068128.9919832,
        //     "priceChangePercent" => 3.48,
        //     "high" => 115968.8,
        //     "low" => 111145.4,
        //     "slug" => "bitcoin-BTC",
        //     "quoteId" => "USDT" or "IRT"
        // }
        $marketType = 'spot';
        $marketId = $this->safe_string($ticker, 'marketId');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $quoteId = $this->safe_string($ticker, 'quoteId', 'USDT');
        $last = null;
        $bid = null;
        $ask = null;
        if ($quoteId === 'IRT') {
            // For IRT => priceSellIRT is the sell $price ($bid), priceBuyIRT is the buy $price ($ask)
            $bid = $this->safe_number($ticker, 'priceSellIRT');
            $ask = $this->safe_number($ticker, 'priceBuyIRT');
            $last = $ask;
        } else {
            // For USDT => $price is in USDT
            $price = $this->safe_number($ticker, 'price');
            $last = $price;
            $bid = $price;
            $ask = $price;
        }
        $high = $this->safe_number($ticker, 'high');
        $low = $this->safe_number($ticker, 'low');
        $percentage = $this->safe_number($ticker, 'priceChangePercent');
        $baseVolume = $this->safe_number($ticker, 'volume');
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1m', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the open, high, low, and close price, and the volume of a $market
             * @see https://api.kifpool.app/api/spot/tickers/1m
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each candle represents
             * @param {int} [$since] timestamp in ms of the earliest candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, open, high, low, close, volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $endTime = Date.now ();
            $request = array(
                'symbol' => $market['baseId'],
                'currency' => $market['quoteId'],
                'fromTs' => (int) floor(($endTime / 1000) - (24 * 60 * 60)),
                'toTs' => (int) floor($endTime / 1000),
            );
            if ($since !== null) {
                $request['fromTs'] = (int) floor($since / 1000);
            }
            if ($limit !== null) {
                $request['limit'] = $limit;
            }
            $response = Async\await($this->publicGetApiSpotTickers1m ($request));
            return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        // {
        //     "data_captured_datetime" => 1760169720,
        //     "open" => 110419.9,
        //     "high" => 110468.4,
        //     "low" => 110330.7,
        //     "close" => 110330.7,
        //     "volume" => 3356941116.288925,
        //     "changePercentage" => -0.0808
        // }
        return array(
            $this->safe_timestamp($ohlcv, 'data_captured_datetime'),
            $this->safe_number($ohlcv, 'open'),
            $this->safe_number($ohlcv, 'high'),
            $this->safe_number($ohlcv, 'low'),
            $this->safe_number($ohlcv, 'close'),
            $this->safe_number($ohlcv, 'volume'),
        );
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($query) {
            $url .= '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
