<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\toobit as Exchange;
use \React\Async;
use \React\Promise\PromiseInterface;

class toobit extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'toobit',
            'name' => 'Toobit',
            'countries' => array( 'KY' ), // Cayman Islands
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => true,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://toobit-docs.github.io/apidocs/spot/v1/en/images/logo.svg',
                'api' => array(
                    'public' => 'https://api.toobit.com',
                ),
                'www' => 'https://www.toobit.com/',
                'doc' => array(
                    'https://toobit-docs.github.io/apidocs/spot/v1/en/#change-log',
                ),
            ),
            'timeframes' => array(
                '1m' => '1m',
                '3m' => '3m',
                '5m' => '5m',
                '15m' => '15m',
                '30m' => '30m',
                '1h' => '1h',
                '2h' => '2h',
                '4h' => '4h',
                '6h' => '6h',
                '12h' => '12h',
                '1d' => '1d',
                '1w' => '1w',
                '1M' => '1M',
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'quote/v1/ticker/24hr' => 1,
                        'quote/v1/klines' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for toobit
             * @see https://apidocs.toobit.io/#tickers
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetQuoteV1Ticker24hr ());
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $volume = $this->safe_float($response[$i], 'v');
                $symbol = $this->safe_value($response[$i], 's');
                if ($volume === 0 || $symbol === 'TESTA1S3TESTX8Z9') {
                    continue;
                }
                $market = $this->parse_market($response[$i]);
                $result[] = $market;
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        //         {
        // t => 1757164008834,
        // s => "BTCUSDT",
        // c => "110895.06",
        // h => "113310.01",
        // l => "110219.01",
        // o => "112951.99",
        // v => "3893.406649",
        // qv => "433374169.27969515",
        // pc => "-2056.93",
        // pcp => "-0.0182"
        // }
        $symbol = $this->safe_value($market, 's');
        $baseId = $symbol;
        $quoteId = null;
        if (str_ends_with($symbol, 'USDT')) {
            $baseId = mb_substr($symbol, 0, -4 - 0);
            $quoteId = 'USDT';
        } elseif (str_ends_with($symbol, 'USDC')) {
            $baseId = mb_substr($symbol, 0, -4 - 0);
            $quoteId = 'USDC';
        }
        $id = $symbol;
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://apidocs.toobit.io/#tickers
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetQuoteV1Ticker24hr ());
            $result = array();
            for ($i = 0; $i < count($response); $i++) {
                $volume = $this->safe_float($response[$i], 'v');
                if ($volume === 0) {
                    continue;
                }
                $ticker = $this->parse_ticker($response[$i]);
                $symbol = $ticker['symbol'];
                $result[$symbol] = $ticker;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific $market
             * @see https://apidocs.toobit.io/#$ticker
             * @param {string} $symbol unified $symbol of the $market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $request = array(
                'symbol' => $market['id'],
            );
            $response = Async\await($this->publicGetQuoteV1Ticker24hr ($request));
            $ticker = $this->parse_ticker($response[0]);
            return $ticker;
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        //         {
        // t => 1757164008834,
        // s => "BTCUSDT",
        // c => "110895.06",
        // h => "113310.01",
        // l => "110219.01",
        // o => "112951.99",
        // v => "3893.406649",
        // qv => "433374169.27969515",
        // pc => "-2056.93",
        // pcp => "-0.0182"
        // }
        $marketType = 'spot';
        $symbol = $this->safe_value($ticker, 's');
        $marketId = $symbol;
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $high = $this->safe_float($ticker, 'h');
        $low = $this->safe_float($ticker, 'l');
        $open = $this->safe_float($ticker, 'o');
        $close = $this->safe_float($ticker, 'c');
        $last = $this->safe_float($ticker, 'c');
        $change = $this->safe_float($ticker, 'pcp');
        $priceChange = $this->safe_float($ticker, 'pc');
        $baseVolume = $this->safe_float($ticker, 'v');
        $quoteVolume = $this->safe_float($ticker, 'qv');
        $datetime = $this->safe_string($ticker, 't');
        $bid = $this->safe_float($ticker, 'b', 0);
        $ask = $this->safe_float($ticker, 'a', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => $datetime,
            'datetime' => $this->parse8601($datetime),
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => $open,
            'close' => $close,
            'last' => $last,
            'previousClose' => null,
            'change' => $priceChange,
            'percentage' => $change,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1h', ?int $since = null, ?int $limit = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $timeframe, $since, $limit, $params) {
            /**
             * fetches historical candlestick data containing the $open, $high, $low, and $close price, and the $volume of a $market
             * @see https://apidocs.toobit.io/#chart
             * @param {string} $symbol unified $symbol of the $market to fetch OHLCV data for
             * @param {string} $timeframe the length of time each $candle represents
             * @param {int} [$since] timestamp in ms of the earliest $candle to fetch
             * @param {int} [$limit] the maximum amount of candles to fetch
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {int[][]} A list of candles ordered, $open, $high, $low, $close, $volume
             */
            Async\await($this->load_markets());
            $market = $this->market($symbol);
            $endTime = Date.now ();
            $request = array(
                'symbol' => $market['id'],
                'from' => ($endTime - (24 * 60 * 60 * 1000)),
                'to' => $endTime,
                'interval' => $this->safe_string($this->timeframes, $timeframe, $timeframe),
            );
            if ($since !== null) {
                $request['from'] = $since;
            }
            if ($timeframe !== null) {
                $request['interval'] = $this->safe_string($this->timeframes, $timeframe, $timeframe);
            }
            $response = Async\await($this->publicGetQuoteV1Klines ($request));
            $ohlcvs = array();
            for ($i = 0; $i < count($response); $i++) {
                $candle = $response[$i];
                $ts = $this->safe_timestamp($candle, 0);
                $open = $this->safe_float($candle, 1);
                $high = $this->safe_float($candle, 2);
                $low = $this->safe_float($candle, 3);
                $close = $this->safe_float($candle, 4);
                $volume = $this->safe_float($candle, 5);
                $ohlcvs[] = array(
                    $ts,
                    $open,
                    $high,
                    $low,
                    $close,
                    $volume,
                );
            }
            return $this->parse_ohlcvs($ohlcvs, $market, $timeframe, $since, $limit);
        }) ();
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($path === 'quote/v1/ticker/24hr') {
            $url = $url . '?' . $this->urlencode($query);
        }
        if ($path === 'quote/v1/klines') {
            $url = $url . '?' . $this->urlencode($query);
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
