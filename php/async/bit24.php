<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\bit24 as Exchange;
use \React\Async;
use \React\Promise\PromiseInterface;

class bit24 extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'bit24',
            'name' => 'Bit24',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/bit24/64x64.png',
                'api' => array(
                    'public' => 'https://bit24.cash/api/',
                ),
                'www' => 'https://bit24.cash/',
                'doc' => array(
                    'https://bit24.cash/',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'pro/v3/markets' => 1,
                    ),
                ),
            ),
            'fees' => array(
            ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all $markets for bit24 with pagination
             * @see https://bit24.cash/api/pro/v3/markets
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $result = array();
            $page = 1;
            $limit = 100; // check Bit24 docs for max allowed per $page
            while (true) {
                $response = Async\await($this->publicGetProV3Markets ($this->extend($params, array(
                    'page' => $page,
                    'per_page' => $limit,
                ))));
                $markets = $this->safe_dict($response, 'data');
                $marketList = $this->safe_list($markets, 'results', array());
                for ($i = 0; $i < count($marketList); $i++) {
                    $marketdata = $marketList[$i];
                    $market = $this->parse_market($marketdata);
                    $result[] = $market;
                }
                // stop condition => if fewer results than $limit, last $page reached
                if (strlen($marketList) < $limit) {
                    break;
                }
                $page += 1;
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        // {
        // $id => 59,
        // market_name => "FTT/IRT",
        // quote_coin_decimal => 0,
        // base_coin_decimal => 2,
        // each_price => "83669.0000000000000000",
        // is_favorite => false,
        // max_leverage => null,
        // margin_profit_retention_fee => null,
        // margin_order_expire_days => null,
        // max_long_margin_leverage => null,
        // max_short_margin_leverage => null,
        // $base_coin => array(
        // symbol => "FTT",
        // name => "FTX Token",
        // fa_name => "اف تی ایکس توکن",
        // logo => "https://exchange-storage.bit24.cash/exchange/icons/ftt.png",
        // coin_type => 0
        // ),
        // $quote_coin => array(
        // symbol => "IRT",
        // name => "Toman",
        // fa_name => "تومان",
        // logo => "https://exchange-storage.bit24.cash/exchange/icons/IRT.png",
        // coin_type => 1
        // ),
        // margin_order_status => array(
        // index => 0,
        // name => "غیرفعال"
        // ),
        // bot_order_status => array(
        // index => 1,
        // name => "فعال"
        // ),
        // market_24h_information => {
        // base_volume => "467.86",
        // quote_volume => "39880070",
        // change_percent => "-1.687",
        // change_amount => "-1436",
        // min_price => "83137",
        // max_price => "87128",
        // first_price => "85105",
        // last_price => "83669"
        // }
        // }
        $base_coin = $this->safe_dict($market, 'base_coin');
        $baseId = $this->safe_string($base_coin, 'symbol');
        $quote_coin = $this->safe_dict($market, 'quote_coin');
        $quoteId = $this->safe_string($quote_coin, 'symbol');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        $id = $baseId . '-' . $quoteId;
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://bit24.com/pro/v3/tickers
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $page = 1;
            $limit = 100; // adjust if Bit24 docs show a different default
            $result = array();
            while (true) {
                $response = Async\await($this->publicGetProV3Markets ($this->extend($params, array(
                    'page' => $page,
                    'per_page' => $limit,
                ))));
                $data = $this->safe_dict($response, 'data', array());
                $tickerList = $this->safe_list($data, 'results', array());
                for ($i = 0; $i < count($tickerList); $i++) {
                    $tickerData = $tickerList[$i];
                    $ticker = $this->parse_ticker($tickerData);
                    $symbol = $ticker['symbol'];
                    $result[$symbol] = $ticker;
                }
                if (strlen($tickerList) < $limit) {
                    break;
                }
                $page += 1;
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @see https://bit24.com/management/all-coins/?format=json
             * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            $ticker = Async\await($this->fetch_tickers(array( $symbol )));
            return $ticker[$symbol];
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        // id => 59,
        // market_name => "FTT/IRT",
        // quote_coin_decimal => 0,
        // base_coin_decimal => 2,
        // each_price => "83669.0000000000000000",
        // is_favorite => false,
        // max_leverage => null,
        // margin_profit_retention_fee => null,
        // margin_order_expire_days => null,
        // max_long_margin_leverage => null,
        // max_short_margin_leverage => null,
        // $base_coin => array(
        // $symbol => "FTT",
        // name => "FTX Token",
        // fa_name => "اف تی ایکس توکن",
        // logo => "https://exchange-storage.bit24.cash/exchange/icons/ftt.png",
        // coin_type => 0
        // ),
        // $quote_coin => array(
        // $symbol => "IRT",
        // name => "Toman",
        // fa_name => "تومان",
        // logo => "https://exchange-storage.bit24.cash/exchange/icons/IRT.png",
        // coin_type => 1
        // ),
        // margin_order_status => array(
        // index => 0,
        // name => "غیرفعال"
        // ),
        // bot_order_status => array(
        // index => 1,
        // name => "فعال"
        // ),
        // market_24h_information => array(
        // base_volume => "467.86",
        // quote_volume => "39880070",
        // change_percent => "-1.687",
        // change_amount => "-1436",
        // min_price => "83137",
        // max_price => "87128",
        // first_price => "85105",
        // last_price => "83669"
        // }
        // ),
        $marketType = 'spot';
        $base_coin = $this->safe_dict($ticker, 'base_coin', array());
        $base_symbol = $this->safe_string($base_coin, 'symbol').toLocaleLowerCase ();
        $quote_coin = $this->safe_dict($ticker, 'quote_coin', array());
        $quote_symbol = $this->safe_string($quote_coin, 'symbol').toLocaleLowerCase ();
        $marketId = $base_symbol . '-' . $quote_symbol;
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $last = $this->safe_float($ticker, 'each_price', 0);
        $markerInfo = $this->safe_dict($ticker, 'market_24h_information', array());
        $change = $this->safe_float($markerInfo, 'change_percent', 0);
        $minPrice = $this->safe_float($markerInfo, 'min_price', 0);
        $maxPrice = $this->safe_float($markerInfo, 'max_price', 0);
        $baseVolume = $this->safe_float($markerInfo, 'base_volume', 0);
        $quoteVolume = $this->safe_float($markerInfo, 'quote_volume', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $maxPrice,
            'low' => $minPrice,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $ticker,
        ), $market);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $query = $this->omit($params, $this->extract_params($path));
        $url = $this->urls['api'][$api] . '/' . $this->implode_params($path, $params);
        if ($query > 0) {
            $queryString = $this->urlencode($query);
            $url .= '?' . $queryString;
        }
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
