<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\abantether as Exchange;
use \React\Async;
use \React\Promise\PromiseInterface;

class abantether extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'abantether',
            'name' => 'Aban tether',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => false,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'otc' => true,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/abantether/64x64.png',
                'api' => array(
                    'public' => 'https://api.abantether.com',
                ),
                'www' => 'https://abantether.com',
                'doc' => array(
                    'https://abantether.com',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'manager/coins/data' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves $data on all markets for abantether
             * @see https://api.abantether.com/manager/coins/data
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market $data
             */
            $response = Async\await($this->publicGetManagerCoinsData ($params));
            $data = $this->safe_list($response, 'data', array());
            $result = array();
            $quotes = array( 'IRT', 'USDT' );
            for ($i = 0; $i < count($data); $i++) {
                $base = $this->safe_string($data[$i], 'symbol');
                for ($index = 0; $index < count($quotes); $index++) {
                    $quote = $quotes[$index];
                    $data[$i]['base'] = $base;
                    $data[$i]['quote'] = $quote;
                    if ($base === $quote) {
                        continue;
                    }
                    $market = $this->parse_market($data[$i]);
                    $result[] = $market;
                }
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        // array(
        //     "id" => 1,
        //     "name" => "Tether USDt",
        //     "symbol" => "USDT",
        //     "persian_name" => "تتر",
        //     "is_active" => true,
        //     "is_withdrawal_active" => true,
        //     "is_deposit_active" => true,
        //     "is_mid_wallet_transfer_active" => true,
        //     "is_buy_active" => true,
        //     "is_sell_active" => true,
        //     "is_credit_active" => true,
        //     "min_trade" => "1.00",
        //     "max_trade" => "100000.00",
        //     "tether_price" => "1",
        //     "price_buy" => "113540.0",
        //     "price_sell" => "112630.0",
        //     "volume24h" => "225163179366.25",
        //     "percent_change_1h" => "0.00",
        //     "percent_change_24h" => "0.00",
        //     "percent_change_7d" => "0.04",
        //     "market_cap" => "179884960573.99",
        //     "coin_type" => "COIN",
        //     "exchange_type" => "fake",
        //     "icon" => "f71021586005413ea6f3a0bd1f7d8a55",
        //     "fund_tether_buy" => "0",
        //     "fund_tether_sell" => "0",
        //     "irt_decimal_point" => 2,
        //     "tether_decimal_point" => 6,
        //     "amount_decimal_point" => 6,
        //     "base" => "BTC",
        //     "qoute" => "USDT",
        // ),
        $baseId = $this->safe_string($market, 'base');
        $quoteId = $this->safe_string($market, 'quote');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $id = $base . $quote;
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'spot',
            'spot' => true,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://api.abantether.com/manager/coins/data
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetManagerCoinsData ($params));
            $data = $this->safe_list($response, 'data', array());
            $result = array();
            $quotes = array( 'IRT', 'USDT' );
            for ($i = 0; $i < count($data); $i++) {
                $base = $this->safe_string($data[$i], 'symbol');
                for ($index = 0; $index < count($quotes); $index++) {
                    $quote = $quotes[$index];
                    if ($base === $quote) {
                        continue;
                    }
                    $data[$i]['base'] = $base;
                    $data[$i]['quote'] = $quote;
                    $data[$i]['symbol'] = $base . $quote;
                    $ticker = $this->parse_ticker($data[$i]);
                    $symbol = $ticker['symbol'];
                    $result[$symbol] = $ticker;
                }
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @see https://api.abantether.com/manager/coins/data
             * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            $ticker = Async\await($this->fetch_tickers(array( $symbol )));
            return $ticker[$symbol];
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // array(
        //     "id" => 2,
        //     "name" => "Bitcoin",
        //     "symbol" => "BTC",
        //     "persian_name" => "بیت کوین",
        //     "is_active" => true,
        //     "is_withdrawal_active" => true,
        //     "is_deposit_active" => true,
        //     "is_mid_wallet_transfer_active" => true,
        //     "is_buy_active" => true,
        //     "is_sell_active" => true,
        //     "is_credit_active" => true,
        //     "min_trade" => "1.00",
        //     "max_trade" => "65000.00",
        //     "tether_price" => "114909.43000000",
        //     "price_buy" => "13049114870.800000000",
        //     "price_sell" => "12944547289.500000000",
        //     "volume24h" => "93585526493.26",
        //     "percent_change_1h" => "-0.29",
        //     "percent_change_24h" => "3.22",
        //     "percent_change_7d" => "-7.19",
        //     "market_cap" => "2292874615411.72",
        //     "coin_type" => "COIN",
        //     "exchange_type" => "binance",
        //     "icon" => "561aa10abc0c45f7aa4499f48d618c80",
        //     "fund_tether_buy" => "0",
        //     "fund_tether_sell" => "0",
        //     "irt_decimal_point" => 0,
        //     "tether_decimal_point" => 2,
        //     "amount_decimal_point" => 9
        // ),
        $marketType = 'otc';
        $marketId = $this->safe_string($ticker, 'symbol');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $last = $this->safe_float($ticker, 'tether_price', 0);
        if ($ticker['quote'] === 'IRT') {
            $last = $this->safe_float($ticker, 'price_buy', 0);
        }
        $change = $this->safe_float($ticker, 'percent_change_24h', 0);
        $baseVolume = $this->safe_float($ticker, 'volume24h', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => null,
            'low' => null,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => $change,
            'percentage' => null,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['public'] . '/' . $path . '?format=json';
        $headers = array( 'Content-Type' => 'application/json', 'Cookie' => '__arcsco=42f03956ded5873c087d9f052b33cbff' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
