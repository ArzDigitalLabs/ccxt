<?php

namespace ccxt\async;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\async\abstract\hamtapay as Exchange;
use \React\Async;
use \React\Promise\PromiseInterface;

class hamtapay extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'hamtapay',
            'name' => 'Hamtapay',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/hamtapay/64x64.png',
                'api' => array(
                    'public' => 'https://api.hamtapay.org',
                ),
                'www' => 'https://hamtapay.net/',
                'doc' => array(
                    'https://hamtapay.net/',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        '/financial/api/market' => 1,
                        '/financial/api/vitrin/prices' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): PromiseInterface {
        return Async\async(function () use ($params) {
            /**
             * retrieves data on all markets for hamtapay
             * @see https://api.hamtapay.org/financial/api/market
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array[]} an array of objects representing $market data
             */
            $response = Async\await($this->publicGetFinancialApiMarket ($params));
            $result = array();
            $marketData = $this->safe_list($response, 'data', array());
            for ($i = 0; $i < count($marketData); $i++) {
                $market = $this->parse_market($marketData[$i]);
                $result[] = $market;
            }
            return $result;
        }) ();
    }

    public function parse_market($market): array {
        // {
        //     "symbol" => "USDT-IRT",
        //     "base" => "USDT",
        //     "quote" => "IRT",
        //     "base_currency_decimals" => 3,
        //     "quote_currency_decimals" => 0,
        //     "amount_decimals" => 0,
        //     "price_decimals" => 0
        // }
        $baseId = $this->safe_string($market, 'base');
        $quoteId = $this->safe_string($market, 'quote');
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $id = $this->safe_string($market, 'symbol');
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'otc',
            'spot' => false,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbols, $params) {
            /**
             * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
             * @see https://api.hamtapay.org/financial/api/vitrin/prices
             * @param {string[]|null} $symbols unified $symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=ticker-structure ticker structures~
             */
            Async\await($this->load_markets());
            if ($symbols !== null) {
                $symbols = $this->market_symbols($symbols);
            }
            $response = Async\await($this->publicGetFinancialApiVitrinPrices ($params));
            $data = $this->safe_dict($response, 'data', array());
            $result = array();
            $quotes = array( 'IRT', 'USDT' );
            for ($i = 0; $i < count($quotes); $i++) {
                $current_qoute = $quotes[$i];
                $corresponding_data = $this->safe_dict($data, $current_qoute, array());
                $baseSymbols = is_array($corresponding_data) ? array_keys($corresponding_data) : array();
                for ($j = 0; $j < count($baseSymbols); $j++) {
                    $current_base = $baseSymbols[$j];
                    $current_ticker = $corresponding_data[$current_base];
                    $current_ticker['base'] = $current_base;
                    $current_ticker['quote'] = $current_qoute;
                    $current_ticker['symbol'] = $current_base . '/' . $current_qoute;
                    $current_ticker['id'] = $current_base . '-' . $current_qoute;
                    $result[$current_ticker['symbol']] = $this->parse_ticker($current_ticker);
                }
            }
            return $this->filter_by_array_tickers($result, 'symbol', $symbols);
        }) ();
    }

    public function fetch_ticker(string $symbol, $params = array ()): PromiseInterface {
        return Async\async(function () use ($symbol, $params) {
            /**
             * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
             * @see https://hamtapay.com/management/all-coins/?format=json
             * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
             * @param {array} [$params] extra parameters specific to the exchange API endpoint
             * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
             */
            $ticker = Async\await($this->fetch_tickers(array( $symbol )));
            return $ticker[$symbol];
        }) ();
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        //     "id" => "USDT-IRT",
        //     "symbol" => "USDT/IRT",
        //     "base" => "USDT",
        //     "quote" => "IRT",
        //     "min_price_24h" => "111702",
        //     "max_price_24h" => "115872",
        //     "market_price" => "115942",
        //     "buy_price" => "117101",
        //     "sell_price" => "114782",
        //     "change_rate_24h" => 3.29,
        //     "amount_decimals" => 0,
        //     "price_decimals" => 0,
        //     "status" => "ACTIVE"
        // }
        $marketType = 'otc';
        $marketId = $this->safe_string($ticker, 'id');
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $last = $this->safe_float($ticker, 'buy_price', 0);
        $change = $this->safe_float($ticker, 'change_rate_24h', 0);
        $ask = $this->safe_float($ticker, 'buy_price', 0);
        $bid = $this->safe_float($ticker, 'sell_price', 0);
        $high = $this->safe_float($ticker, 'max_price_24h', 0);
        $low = $this->safe_float($ticker, 'min_price_24h', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => $bid,
            'bidVolume' => null,
            'ask' => $ask,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $change,
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['public'] . '/' . $path;
        $headers = array( 'Content-Type' => 'application/json' );
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
