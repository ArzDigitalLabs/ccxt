<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\afratether as Exchange;

class afratether extends Exchange {

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'afratether',
            'name' => 'Afratether',
            'countries' => array( 'IR' ),
            'rateLimit' => 1000,
            'version' => '1',
            'certified' => false,
            'pro' => false,
            'has' => array(
                'CORS' => null,
                'spot' => false,
                'margin' => false,
                'swap' => false,
                'future' => false,
                'option' => false,
                'addMargin' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => false,
                'cancelOrders' => false,
                'createDepositAddress' => false,
                'createOrder' => false,
                'createStopLimitOrder' => false,
                'createStopMarketOrder' => false,
                'createStopOrder' => false,
                'editOrder' => false,
                'fetchBalance' => false,
                'fetchBorrowInterest' => false,
                'fetchBorrowRateHistories' => false,
                'fetchBorrowRateHistory' => false,
                'fetchClosedOrders' => false,
                'fetchCrossBorrowRate' => false,
                'fetchCrossBorrowRates' => false,
                'fetchCurrencies' => false,
                'fetchDepositAddress' => false,
                'fetchDeposits' => false,
                'fetchFundingHistory' => false,
                'fetchFundingRate' => false,
                'fetchFundingRateHistory' => false,
                'fetchFundingRates' => false,
                'fetchIndexOHLCV' => false,
                'fetchIsolatedBorrowRate' => false,
                'fetchIsolatedBorrowRates' => false,
                'fetchL2OrderBook' => false,
                'fetchL3OrderBook' => false,
                'fetchLedger' => false,
                'fetchLedgerEntry' => false,
                'fetchLeverageTiers' => false,
                'fetchMarkets' => true,
                'fetchMarkOHLCV' => false,
                'fetchMyTrades' => false,
                'fetchOHLCV' => false,
                'fetchOpenInterestHistory' => false,
                'fetchOpenOrders' => false,
                'fetchOrder' => false,
                'fetchOrderBook' => false,
                'fetchOrders' => false,
                'fetchOrderTrades' => 'emulated',
                'fetchPositions' => false,
                'fetchPremiumIndexOHLCV' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTime' => false,
                'fetchTrades' => false,
                'fetchTradingFee' => false,
                'fetchTradingFees' => false,
                'fetchWithdrawals' => false,
                'otc' => true,
                'setLeverage' => false,
                'setMarginMode' => false,
                'transfer' => false,
                'withdraw' => false,
            ),
            'comment' => 'This comment is optional',
            'urls' => array(
                'logo' => 'https://cdn.arz.digital/cr-odin/img/exchanges/afratether/64x64.png',
                'api' => array(
                    'public' => 'https://afrap2p.com',
                    'token' => 'https://afratether.com',
                ),
                'www' => 'https://afratether.com',
                'doc' => array(
                    'https://afratether.com',
                ),
            ),
            'api' => array(
                'public' => array(
                    'get' => array(
                        'api/v1.0/price' => 1,
                        'token' => 1,
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'maker' => $this->parse_number('0.001'),
                    'taker' => $this->parse_number('0.001'),
                ),
            ),
        ));
    }

    public function fetch_markets($params = array ()): array {
        /**
         * retrieves data on all $markets for afratether
         * @see https://afratether.com/
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array[]} an array of objects representing $market data
         */
        $token = $this->publicGetToken ();
        $request = array(
            'Authorization' => $token,
        );
        $response = $this->publicGetApiV10Price ($request);
        $markets = $this->safe_list($response, 'Items');
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $market = $this->parse_market($markets[$i]);
            $result[] = $market;
        }
        return $result;
    }

    public function parse_market($market): array {
        // {
        //     "currencyAbb" => "USDT",
        //     "nameEn" => "Tether",
        //     "nameFa" => "تتر",
        //     "icon" => "/assets/crypto/usdt.png",
        //     "round" => 1000000,
        //     "currency" => "USDT",
        //     "changeRate24h" => "-0.0065",
        //     "Klines" => array(
        //         array(
        //             "1760227200000",
        //             "1147500",
        //             "1140000",
        //             "1145500",
        //             "1125000",
        //             "0",
        //             "0"
        //         ),
        //     ),
        //     "info" => array(
        //         "birth_date" => 1412553600000,
        //         "open_24h" => 1,
        //         "open_1w" => 1,
        //         "open_3M" => 1,
        //         "open_1y" => 1
        //     ),
        //     "prices" => {
        //         "USDT" => array(
        //             "price" => "1"
        //         ),
        //         "IRR" => {
        //             "price_sell" => 1135000,
        //             "price_buy" => 1123000
        //         }
        //     }
        // }
        $baseId = $this->safe_string($market, 'currency');
        $quoteId = 'IRR';
        $base = $this->safe_currency_code($baseId);
        $quote = $this->safe_currency_code($quoteId);
        $id = $base . $quote;
        $baseId = strtolower($baseId);
        $quoteId = strtolower($quoteId);
        return array(
            'id' => $id,
            'symbol' => $base . '/' . $quote,
            'base' => $base,
            'quote' => $quote,
            'settle' => null,
            'baseId' => $baseId,
            'quoteId' => $quoteId,
            'settleId' => null,
            'type' => 'otc',
            'spot' => false,
            'margin' => false,
            'swap' => false,
            'future' => false,
            'option' => false,
            'active' => true,
            'contract' => false,
            'linear' => null,
            'inverse' => null,
            'contractSize' => null,
            'expiry' => null,
            'expiryDatetime' => null,
            'strike' => null,
            'optionType' => null,
            'precision' => array(
                'amount' => null,
                'price' => null,
            ),
            'limits' => array(
                'leverage' => array(
                    'min' => null,
                    'max' => null,
                ),
                'amount' => array(
                    'min' => null,
                    'max' => null,
                ),
                'price' => array(
                    'min' => null,
                    'max' => null,
                ),
                'cost' => array(
                    'min' => null,
                    'max' => null,
                ),
            ),
            'created' => null,
            'info' => $market,
        );
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple $markets, statistical information calculated over the past 24 hours for each market
         * @see https://afratether.com/
         * @param {string[]|null} $symbols unified $symbols of the $markets to fetch the $ticker for, all market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structures~
         */
        $this->load_markets();
        if ($symbols !== null) {
            $symbols = $this->market_symbols($symbols);
        }
        $token = $this->publicGetToken ();
        $request = array(
            'Authorization' => $token,
        );
        $response = $this->publicGetApiV10Price ($request);
        $markets = $this->safe_list($response, 'Items');
        $result = array();
        for ($i = 0; $i < count($markets); $i++) {
            $ticker = $this->parse_ticker($markets[$i]);
            $symbol = $ticker['symbol'];
            $result[$symbol] = $ticker;
        }
        return $this->filter_by_array_tickers($result, 'symbol', $symbols);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        /**
         * fetches a price $ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://afratether.com/
         * @param {string} $symbol unified $symbol of the market to fetch the $ticker for
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a ~@link https://docs.ccxt.com/#/?id=$ticker-structure $ticker structure~
         */
        $ticker = $this->fetch_tickers(array( $symbol ));
        return $ticker[$symbol];
    }

    public function parse_ticker($ticker, ?array $market = null): array {
        // {
        //     "currencyAbb" => "USDT",
        //     "nameEn" => "Tether",
        //     "nameFa" => "تتر",
        //     "icon" => "/assets/crypto/usdt.png",
        //     "round" => 1000000,
        //     "currency" => "USDT",
        //     "changeRate24h" => "-0.0065",
        //     "Klines" => array(
        //         array(
        //             "1760227200000",
        //             "1147500",
        //             "1140000",
        //             "1145500",
        //             "1125000",
        //             "0",
        //             "0"
        //         ),
        //     ),
        //     "info" => array(
        //         "birth_date" => 1412553600000,
        //         "open_24h" => 1,
        //         "open_1w" => 1,
        //         "open_3M" => 1,
        //         "open_1y" => 1
        //     ),
        //     "prices" => {
        //         "USDT" => array(
        //             "price" => "1"
        //         ),
        //         "IRR" => {
        //             "price_sell" => 1135000,
        //             "price_buy" => 1123000
        //         }
        //     }
        // }
        $marketType = 'otc';
        $base = $this->safe_string($ticker, 'currency');
        $quote = 'IRR';
        $marketId = $base . '/' . $quote;
        $symbol = $this->safe_symbol($marketId, $market, null, $marketType);
        $prices = $this->safe_dict($ticker, 'prices', array());
        $irrPrices = $this->safe_dict($prices, 'IRR', array());
        $sell = $this->safe_float($irrPrices, 'price_sell', 0);
        $buy = $this->safe_float($irrPrices, 'price_buy', 0);
        return $this->safe_ticker(array(
            'symbol' => $symbol,
            'timestamp' => null,
            'datetime' => null,
            'high' => null,
            'low' => null,
            'bid' => $sell,
            'bidVolume' => null,
            'ask' => $buy,
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $buy,
            'last' => $buy,
            'previousClose' => null,
            'change' => $this->safe_float($ticker, 'changeRate24h', null),
            'percentage' => null,
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => null,
            'info' => $ticker,
        ), $market);
    }

    public function sign($path, $api = 'public', $method = 'GET', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api']['public'] . '/' . $path;
        if ($path === 'token') {
            $url = $this->urls['api']['token'] . '/' . $path;
        }
        $headers = array( 'Content-Type' => 'application/json' );
        if ($path === 'api/v1.0/price') {
            $headers = array( 'Content-Type' => 'application/json', 'Authorization' => str_replace('\n', '', $params['Authorization']) );
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }
}
