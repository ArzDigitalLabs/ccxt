namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class bitpin : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "bitpin" },
            { "name", "bitpin" },
            { "countries", new List<object>() {"IR"} },
            { "rateLimit", 1000 },
            { "version", "1" },
            { "certified", false },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", false },
                { "cancelOrder", false },
                { "cancelOrders", false },
                { "createDepositAddress", false },
                { "createOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "editOrder", false },
                { "fetchBalance", false },
                { "fetchBorrowInterest", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", false },
                { "fetchDepositAddress", false },
                { "fetchDeposits", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchL2OrderBook", false },
                { "fetchL3OrderBook", false },
                { "fetchLedger", false },
                { "fetchLedgerEntry", false },
                { "fetchLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", false },
                { "fetchOHLCV", true },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", false },
                { "fetchOrder", false },
                { "fetchOrderBook", true },
                { "fetchOrders", false },
                { "fetchOrderTrades", "emulated" },
                { "fetchPositions", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", false },
                { "fetchTrades", false },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchWithdrawals", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "transfer", false },
                { "withdraw", false },
            } },
            { "comment", "This comment is optional" },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://cdn.arz.digital/cr-odin/img/exchanges/bitpin/64x64.png" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.bitpin.ir" },
                    { "OHLCV", "https://api.bitpin.org" },
                } },
                { "www", "https://bitpin.ir" },
                { "doc", new List<object>() {"https://docs.bitpin.ir"} },
            } },
            { "timeframes", new Dictionary<string, object>() {
                { "1m", "1" },
                { "5m", "5" },
                { "15m", "15" },
                { "30m", "30" },
                { "1h", "60" },
                { "3h", "180" },
                { "4h", "240" },
                { "12h", "720" },
                { "1d", "1D" },
                { "1w", "1W" },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "v1/mkt/markets/", 1 },
                        { "v2/mth/actives/", 1 },
                        { "v1/mkt/tv/get_bars/", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "maker", this.parseNumber("0.001") },
                    { "taker", this.parseNumber("0.001") },
                } },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name bitpin#fetchMarkets
        * @description retrieves data on all markets for bitpin
        * @see https://api-docs.bitpin.ir/#be8d9c51a2
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetV1MktMarkets(parameters);
        object markets = this.safeList(response, "results");
        object result = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object market = this.parseMarket(getValue(markets, i));
            ((IList<object>)result).Add(market);
        }
        return result;
    }

    public override object parseMarket(object market)
    {
        object id = this.safeString(market, "id");
        object baseCurrency = this.safeDict(market, "currency1");
        object quoteCurrency = this.safeDict(market, "currency2");
        object baseId = this.safeString(baseCurrency, "code");
        object quoteId = this.safeString(quoteCurrency, "code");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        baseId = ((string)baseId).ToLower();
        quoteId = ((string)quoteId).ToLower();
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", true },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", null },
                { "price", null },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", market },
        };
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name bitpin#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://api-docs.bitpin.ir/#be8d9c51a2
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(!isEqual(symbols, null)))
        {
            symbols = this.marketSymbols(symbols);
        }
        object response = await this.publicGetV1MktMarkets(parameters);
        object markets = this.safeList(response, "results");
        object result = new Dictionary<string, object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object is_active = this.safeBool(getValue(markets, i), "tradable");
            if (isTrue(isEqual(is_active, true)))
            {
                object ticker = this.parseTicker(getValue(markets, i));
                object symbol = getValue(ticker, "symbol");
                ((IDictionary<string,object>)result)[(string)symbol] = ticker;
            }
        }
        return this.filterByArrayTickers(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name bitpin#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://api-docs.bitpin.ir/#be8d9c51a2
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object ticker = await this.fetchTickers(new List<object>() {symbol});
        return getValue(ticker, symbol);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        // {
        //     'id': 1,
        //     'currency1': {
        //         'id': 1,
        //         'title': 'Bitcoin',
        //         'title_fa': 'بیت کوین',
        //         'code': 'BTC',
        //         'tradable': true,
        //         'for_test': false,
        //         'image': 'https://cdn.bitpin.ir/media/market/currency/1697370601.svg',
        //         'decimal': 2,
        //         'decimal_amount': 8,
        //         'decimal_irt': 0,
        //         'color': 'f7931a',
        //         'high_risk': false,
        //         'show_high_risk': false,
        //         'withdraw_commission': '0.003000000000000000',
        //         'tags': [
        //             {
        //                 'id': 44,
        //                 'name': 'لایه ۱',
        //                 'name_en': 'layer-1',
        //                 'has_chart': true,
        //             },
        //             {
        //                 'id': 52,
        //                 'name': 'اثبات کار',
        //                 'name_en': 'pow',
        //                 'has_chart': true,
        //             },
        //         ],
        //         'etf': false,
        //         'for_binvest': false,
        //         'for_loan': true,
        //         'for_stake': false,
        //         'recommend_for_deposit_weight': 1,
        //     },
        //     'currency2': {
        //         'id': 2,
        //         'title': 'Toman',
        //         'title_fa': 'تومان',
        //         'code': 'IRT',
        //         'tradable': true,
        //         'for_test': false,
        //         'image': 'https://cdn.bitpin.ir/media/market/currency/1684671406.svg',
        //         'decimal': 0,
        //         'decimal_amount': 0,
        //         'decimal_irt': 1,
        //         'color': '00fd22',
        //         'high_risk': false,
        //         'show_high_risk': false,
        //         'withdraw_commission': '0.000200000000000000',
        //         'tags': [ ],
        //         'etf': false,
        //         'for_binvest': false,
        //         'for_loan': false,
        //         'for_stake': false,
        //         'recommend_for_deposit_weight': 0,
        //     },
        //     'tradable': true,
        //     'for_test': false,
        //     'otc_sell_percent': '0.01000',
        //     'otc_buy_percent': '0.01000',
        //     'otc_max_buy_amount': '0.017000000000000000',
        //     'otc_max_sell_amount': '0.017000000000000000',
        //     'order_book_info': {
        //         'created_at': null,
        //         'price': '3894924262',
        //         'change': 0.0179,
        //         'min': '3777777800',
        //         'max': '3925000000',
        //         'time': '2024-05-19T13:45:00.000Z',
        //         'mean': '3833950912',
        //         'value': '6215833783',
        //         'amount': '1.62286922',
        //     },
        //     'internal_price_info': {
        //         'created_at': 1716126301.298626,
        //         'price': '3894924262',
        //         'change': 1.8,
        //         'min': '3777777800',
        //         'max': '3925000000',
        //         'time': null,
        //         'mean': null,
        //         'value': null,
        //         'amount': null,
        //     },
        //     'price_info': {
        //         'created_at': 1716126370.677,
        //         'price': '3906940950',
        //         'change': 2.04,
        //         'min': '3785113135',
        //         'max': '3921003333',
        //         'time': null,
        //         'mean': null,
        //         'value': null,
        //         'amount': null,
        //     },
        //     'price': '3906940950',
        //     'title': 'Bitcoin/Toman',
        //     'code': 'BTC_IRT',
        //     'title_fa': 'بیت کوین/تومان',
        //     'trading_view_source': 'BINANCE',
        //     'trading_view_symbol': 'BTCUSDT',
        //     'otc_market': false,
        //     'text': '',
        //     'volume_24h': '2318294704054686.000000000000000000',
        //     'market_cap': '43370130583253964.000000000000000000',
        //     'circulating_supply': '19588837.000000000000000000',
        //     'all_time_high': '3577014315.000000000000000000',
        //     'popularity_weight': 0,
        //     'freshness_weight': 0,
        // }
        object marketType = "spot";
        object priceInfo = this.safeValue(ticker, "order_book_info");
        object marketId = this.safeString(ticker, "id");
        object symbol = this.safeSymbol(marketId, market, null, marketType);
        object high = this.safeFloat(priceInfo, "max", 0);
        object low = this.safeFloat(priceInfo, "min", 0);
        object last = this.safeFloat(priceInfo, "price", 0);
        object change = this.safeFloat(priceInfo, "change", 0);
        object baseVolume = this.safeFloat(priceInfo, "amount", 0);
        object quoteVolume = this.safeFloat(priceInfo, "value", 0);
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", null },
            { "datetime", null },
            { "high", high },
            { "low", low },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", change },
            { "percentage", null },
            { "average", null },
            { "baseVolume", baseVolume },
            { "quoteVolume", quoteVolume },
            { "info", ticker },
        }, market);
    }

    public async override Task<object> fetchOHLCV(object symbol, object timeframe = null, object since = null, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitpin#fetchOHLCV
        * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
        * @see https://api-docs.bitpin.ir/#be8d9c51a2
        * @param {string} symbol unified symbol of the market to fetch OHLCV data for
        * @param {string} timeframe the length of time each candle represents
        * @param {int} [since] timestamp in ms of the earliest candle to fetch
        * @param {int} [limit] the maximum amount of candles to fetch
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
        */
        timeframe ??= "1m";
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object endTime = (new DateTimeOffset(DateTime.UtcNow)).ToUnixTimeMilliseconds();
        object request = new Dictionary<string, object>() {
            { "symbol", ((string)getValue(market, "symbol")).Replace((string)"/", (string)"_") },
            { "from", subtract((divide(endTime, 1000)), (multiply(multiply(24, 60), 60))) },
            { "to", divide(endTime, 1000) },
            { "res", this.safeString(this.timeframes, timeframe, timeframe) },
        };
        if (isTrue(!isEqual(since, null)))
        {
            ((IDictionary<string,object>)request)["from"] = divide(since, 1000);
        }
        ((IDictionary<string,object>)request)["from"] = this.safeInteger(request, "from");
        ((IDictionary<string,object>)request)["to"] = this.safeInteger(request, "to");
        if (isTrue(!isEqual(timeframe, null)))
        {
            ((IDictionary<string,object>)request)["res"] = this.safeString(this.timeframes, timeframe, timeframe);
        }
        object response = await this.publicGetV1MktTvGetBars(request);
        object ohlcvs = new List<object>() {};
        for (object i = 0; isLessThan(i, getArrayLength(response)); postFixIncrement(ref i))
        {
            ((IList<object>)ohlcvs).Add(new List<object> {this.safeValue(getValue(response, i), "ts"), this.safeFloat(getValue(response, i), "open"), this.safeFloat(getValue(response, i), "high"), this.safeFloat(getValue(response, i), "low"), this.safeFloat(getValue(response, i), "close"), this.safeFloat(getValue(response, i), "volume")});
        }
        return this.parseOHLCVs(ohlcvs, market, timeframe, since, limit);
    }

    public async override Task<object> fetchOrderBook(object symbol, object limit = null, object parameters = null)
    {
        /**
        * @method
        * @name bitpin#fetchOrderBooks
        * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
        * @see https://api-docs.bitpin.ir/#be8d9c51a2
        * @param {string[]|undefined} symbols list of unified market symbols, all symbols fetched if undefined, default is undefined
        * @param {int} [limit] max number of entries per orderbook to return, default is undefined
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbol
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        object market = this.market(symbol);
        object request = new Dictionary<string, object>() {
            { "symbol", getValue(market, "id") },
            { "type", "buy" },
        };
        object Buyresponse = await this.publicGetV2MthActives(request);
        ((IDictionary<string,object>)request)["type"] = "sell";
        object Sellresponse = await this.publicGetV2MthActives(request);
        object BuyorderBook = this.safeDict(Buyresponse, "orders", new Dictionary<string, object>() {});
        object SellorderBook = this.safeDict(Sellresponse, "orders", new Dictionary<string, object>() {});
        object orderBook = new Dictionary<string, object>() {
            { "bid", BuyorderBook },
            { "ask", SellorderBook },
        };
        object timestamp = (new DateTimeOffset(DateTime.UtcNow)).ToUnixTimeMilliseconds();
        return this.parseOrderBook(orderBook, symbol, timestamp, "bid", "ask", "price", "amount");
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object query = this.omit(parameters, this.extractParams(path));
        object url = add(add(getValue(getValue(this.urls, "api"), api), "/"), path);
        if (isTrue(isEqual(path, "v1/mkt/tv/get_bars/")))
        {
            url = add(add(add(add(getValue(getValue(this.urls, "api"), "OHLCV"), "/"), path), "?"), this.urlencode(query));
        }
        if (isTrue(isEqual(path, "v2/mth/actives/")))
        {
            url = add(add(add(url, getValue(parameters, "symbol")), "/?type="), getValue(parameters, "type"));
        }
        headers = new Dictionary<string, object>() {
            { "Content-Type", "application/json" },
        };
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }
}
