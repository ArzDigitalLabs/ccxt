namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

public partial class sarmayex : Exchange
{
    public override object describe()
    {
        return this.deepExtend(base.describe(), new Dictionary<string, object>() {
            { "id", "sarmayex" },
            { "name", "Sarmayex" },
            { "countries", new List<object>() {"IR"} },
            { "rateLimit", 1000 },
            { "version", "1" },
            { "certified", false },
            { "pro", false },
            { "has", new Dictionary<string, object>() {
                { "CORS", null },
                { "spot", true },
                { "margin", false },
                { "swap", false },
                { "future", false },
                { "option", false },
                { "addMargin", false },
                { "cancelAllOrders", false },
                { "cancelOrder", false },
                { "cancelOrders", false },
                { "createDepositAddress", false },
                { "createOrder", false },
                { "createStopLimitOrder", false },
                { "createStopMarketOrder", false },
                { "createStopOrder", false },
                { "editOrder", false },
                { "fetchBalance", false },
                { "fetchBorrowInterest", false },
                { "fetchBorrowRateHistories", false },
                { "fetchBorrowRateHistory", false },
                { "fetchClosedOrders", false },
                { "fetchCrossBorrowRate", false },
                { "fetchCrossBorrowRates", false },
                { "fetchCurrencies", false },
                { "fetchDepositAddress", false },
                { "fetchDeposits", false },
                { "fetchFundingHistory", false },
                { "fetchFundingRate", false },
                { "fetchFundingRateHistory", false },
                { "fetchFundingRates", false },
                { "fetchIndexOHLCV", false },
                { "fetchIsolatedBorrowRate", false },
                { "fetchIsolatedBorrowRates", false },
                { "fetchL2OrderBook", false },
                { "fetchL3OrderBook", false },
                { "fetchLedger", false },
                { "fetchLedgerEntry", false },
                { "fetchLeverageTiers", false },
                { "fetchMarkets", true },
                { "fetchMarkOHLCV", false },
                { "fetchMyTrades", false },
                { "fetchOHLCV", false },
                { "fetchOpenInterestHistory", false },
                { "fetchOpenOrders", false },
                { "fetchOrder", false },
                { "fetchOrderBook", false },
                { "fetchOrders", false },
                { "fetchOrderTrades", "emulated" },
                { "fetchPositions", false },
                { "fetchPremiumIndexOHLCV", false },
                { "fetchTicker", true },
                { "fetchTickers", true },
                { "fetchTime", false },
                { "fetchTrades", false },
                { "fetchTradingFee", false },
                { "fetchTradingFees", false },
                { "fetchWithdrawals", false },
                { "setLeverage", false },
                { "setMarginMode", false },
                { "transfer", false },
                { "withdraw", false },
            } },
            { "comment", "This comment is optional" },
            { "urls", new Dictionary<string, object>() {
                { "logo", "https://cdn.arz.digital/cr-odin/img/exchanges/sarmayex/64x64.png" },
                { "api", new Dictionary<string, object>() {
                    { "public", "https://api.sarmayex.com" },
                } },
                { "www", "https://sarmayex.com" },
                { "doc", new List<object>() {"https://sarmayex.com"} },
            } },
            { "api", new Dictionary<string, object>() {
                { "public", new Dictionary<string, object>() {
                    { "get", new Dictionary<string, object>() {
                        { "api/v1/public/currencies", 1 },
                    } },
                } },
            } },
            { "fees", new Dictionary<string, object>() {
                { "trading", new Dictionary<string, object>() {
                    { "tierBased", false },
                    { "percentage", true },
                    { "maker", this.parseNumber("0.001") },
                    { "taker", this.parseNumber("0.001") },
                } },
            } },
        });
    }

    public async override Task<object> fetchMarkets(object parameters = null)
    {
        /**
        * @method
        * @name sarmayex#fetchMarkets
        * @description retrieves data on all markets for sarmayex
        * @see https://api.sarmayex.com/api/v1/public/currencies
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object[]} an array of objects representing market data
        */
        parameters ??= new Dictionary<string, object>();
        object response = await this.publicGetApiV1PublicCurrencies(parameters);
        response = this.safeDict(response, "data");
        object markets = this.safeList(response, "currencies");
        object result = new List<object>() {};
        object quotes = new List<object>() {"IRT", "USDT"};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object bs = this.safeString(getValue(markets, i), "symbol");
            for (object index = 0; isLessThan(index, getArrayLength(quotes)); postFixIncrement(ref index))
            {
                object quote = getValue(quotes, index);
                ((IDictionary<string,object>)getValue(markets, i))["base"] = bs;
                ((IDictionary<string,object>)getValue(markets, i))["quote"] = quote;
                if (isTrue(isEqual(bs, quote)))
                {
                    continue;
                }
                object market = this.parseMarket(getValue(markets, i));
                ((IList<object>)result).Add(market);
            }
        }
        return result;
    }

    public override object parseMarket(object market)
    {
        //   {
        //     'id': 87,
        //     'title': 'تتر',
        //     'title_en': 'Tether',
        //     'symbol': 'USDT',
        //     'sell_price': '58,987',
        //     'sell_price_usd': '1.0000',
        //     'sell_price_wm': '1.062',
        //     'sell_price_pm': '1.085',
        //     'can_sell': 1,
        //     'can_sell_iw': 1,
        //     'can_buy': 1,
        //     'can_buy_iw': 1,
        //     'buy_price': '58,448',
        //     'min_buy': '0.00000000',
        //     'max_buy': '232348196.00000000',
        //     'percent_change_1h': 0.00495761,
        //     'percent_change_24h': 0.0333481,
        //     'percent_change_7d': 0.0540622,
        //     'tick': 4,
        //     'need_tag': 0,
        //     'need_address': 1,
        //     'use_copon': 1,
        //     'updated_at': 1717936143,
        //     'image': '',
        //     'has_content': 1,
        //     'withdraw_nets': [],
        //     'deposit_nets': [],
        //     'sell_request_gateway': 1,
        //     'exist_in_wallet': 1,
        //     'tags': [
        //         {
        //             'id': 3,
        //             'name': 'استیبل کوین',
        //         },
        //         {
        //             'id': 13,
        //             'name': 'قابل پرداخت',
        //         },
        //     ],
        // };
        object baseId = this.safeString(market, "base");
        object quoteId = this.safeString(market, "quote");
        object bs = this.safeCurrencyCode(baseId);
        object quote = this.safeCurrencyCode(quoteId);
        object id = add(bs, quote);
        baseId = ((string)baseId).ToLower();
        quoteId = ((string)quoteId).ToLower();
        return new Dictionary<string, object>() {
            { "id", id },
            { "symbol", add(add(bs, "/"), quote) },
            { "base", bs },
            { "quote", quote },
            { "settle", null },
            { "baseId", baseId },
            { "quoteId", quoteId },
            { "settleId", null },
            { "type", "spot" },
            { "spot", true },
            { "margin", false },
            { "swap", false },
            { "future", false },
            { "option", false },
            { "active", true },
            { "contract", false },
            { "linear", null },
            { "inverse", null },
            { "contractSize", null },
            { "expiry", null },
            { "expiryDatetime", null },
            { "strike", null },
            { "optionType", null },
            { "precision", new Dictionary<string, object>() {
                { "amount", null },
                { "price", null },
            } },
            { "limits", new Dictionary<string, object>() {
                { "leverage", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "amount", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "price", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
                { "cost", new Dictionary<string, object>() {
                    { "min", null },
                    { "max", null },
                } },
            } },
            { "created", null },
            { "info", market },
        };
    }

    public async override Task<object> fetchTickers(object symbols = null, object parameters = null)
    {
        /**
        * @method
        * @name sarmayex#fetchTickers
        * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
        * @see https://api.sarmayex.com/api/v1/public/currencies
        * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        await this.loadMarkets();
        if (isTrue(!isEqual(symbols, null)))
        {
            symbols = this.marketSymbols(symbols);
        }
        object response = await this.publicGetApiV1PublicCurrencies(parameters);
        response = this.safeDict(response, "data");
        object markets = this.safeList(response, "currencies");
        object result = new List<object>() {};
        object quotes = new List<object>() {"IRT", "USDT"};
        for (object i = 0; isLessThan(i, getArrayLength(markets)); postFixIncrement(ref i))
        {
            object bs = this.safeString(getValue(markets, i), "symbol");
            for (object index = 0; isLessThan(index, getArrayLength(quotes)); postFixIncrement(ref index))
            {
                object quote = getValue(quotes, index);
                if (isTrue(isEqual(bs, quote)))
                {
                    continue;
                }
                ((IDictionary<string,object>)getValue(markets, i))["base"] = bs;
                ((IDictionary<string,object>)getValue(markets, i))["quote"] = quote;
                ((IDictionary<string,object>)getValue(markets, i))["symbol"] = add(bs, quote);
                object ticker = this.parseTicker(getValue(markets, i));
                object symbol = getValue(ticker, "symbol");
                ((IDictionary<string,object>)result)[(string)symbol] = ticker;
            }
        }
        return this.filterByArrayTickers(result, "symbol", symbols);
    }

    public async override Task<object> fetchTicker(object symbol, object parameters = null)
    {
        /**
        * @method
        * @name sarmayex#fetchTicker
        * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
        * @see https://api.sarmayex.com/api/v1/public/currencies
        * @param {string} symbol unified symbol of the market to fetch the ticker for
        * @param {object} [params] extra parameters specific to the exchange API endpoint
        * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
        */
        parameters ??= new Dictionary<string, object>();
        object ticker = await this.fetchTickers(new List<object>() {symbol});
        return getValue(ticker, symbol);
    }

    public override object parseTicker(object ticker, object market = null)
    {
        //   {
        //     'id': 87,
        //     'title': 'تتر',
        //     'title_en': 'Tether',
        //     'symbol': 'USDT',
        //     'sell_price': '58,987',
        //     'sell_price_usd': '1.0000',
        //     'sell_price_wm': '1.062',
        //     'sell_price_pm': '1.085',
        //     'can_sell': 1,
        //     'can_sell_iw': 1,
        //     'can_buy': 1,
        //     'can_buy_iw': 1,
        //     'buy_price': '58,448',
        //     'min_buy': '0.00000000',
        //     'max_buy': '232348196.00000000',
        //     'percent_change_1h': 0.00495761,
        //     'percent_change_24h': 0.0333481,
        //     'percent_change_7d': 0.0540622,
        //     'tick': 4,
        //     'need_tag': 0,
        //     'need_address': 1,
        //     'use_copon': 1,
        //     'updated_at': 1717936143,
        //     'image': '',
        //     'has_content': 1,
        //     'withdraw_nets': [],
        //     'deposit_nets': [],
        //     'sell_request_gateway': 1,
        //     'exist_in_wallet': 1,
        //     'tags': [
        //         {
        //             'id': 3,
        //             'name': 'استیبل کوین',
        //         },
        //         {
        //             'id': 13,
        //             'name': 'قابل پرداخت',
        //         },
        //     ],
        // };
        object marketType = "otc";
        object marketId = this.safeString(ticker, "symbol");
        object symbol = this.safeSymbol(marketId, market, null, marketType);
        ((IDictionary<string,object>)ticker)["sell_price"] = ((string)getValue(ticker, "sell_price")).Replace((string)",", (string)"");
        ((IDictionary<string,object>)ticker)["sell_price_usd"] = ((string)getValue(ticker, "sell_price")).Replace((string)",", (string)"");
        ((IDictionary<string,object>)ticker)["buy_price"] = ((string)getValue(ticker, "sell_price")).Replace((string)",", (string)"");
        object last = this.safeFloat(ticker, "sell_price_usd", 0);
        if (isTrue(isEqual(getValue(ticker, "quote"), "IRT")))
        {
            last = this.safeFloat(ticker, "sell_price", 0);
        }
        object change = this.safeFloat(ticker, "percent_change_24h", 0);
        object timestamp = this.safeInteger(ticker, "updated_at");
        return this.safeTicker(new Dictionary<string, object>() {
            { "symbol", symbol },
            { "timestamp", multiply(timestamp, 1000) },
            { "datetime", this.iso8601(multiply(timestamp, 1000)) },
            { "high", null },
            { "low", null },
            { "bid", null },
            { "bidVolume", null },
            { "ask", null },
            { "askVolume", null },
            { "vwap", null },
            { "open", null },
            { "close", last },
            { "last", last },
            { "previousClose", null },
            { "change", change },
            { "percentage", null },
            { "average", null },
            { "baseVolume", null },
            { "quoteVolume", null },
            { "info", ticker },
        }, market);
    }

    public override object sign(object path, object api = null, object method = null, object parameters = null, object headers = null, object body = null)
    {
        api ??= "public";
        method ??= "GET";
        parameters ??= new Dictionary<string, object>();
        object url = add(add(getValue(getValue(this.urls, "api"), "public"), "/"), path);
        headers = new Dictionary<string, object>() {
            { "Content-Type", "application/json" },
        };
        return new Dictionary<string, object>() {
            { "url", url },
            { "method", method },
            { "body", body },
            { "headers", headers },
        };
    }
}
