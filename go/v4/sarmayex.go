package ccxt

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

type sarmayex struct {
    Exchange

}

func NewSarmayexCore() *sarmayex {
    p := &sarmayex{}
    setDefaults(p)
    return p
}

func  (this *sarmayex) Describe() interface{}  {
    return this.DeepExtend(this.Exchange.Describe(), map[string]interface{} {
        "id": "sarmayex",
        "name": "Sarmayex",
        "countries": []interface{}{"IR"},
        "rateLimit": 1000,
        "version": "1",
        "certified": false,
        "pro": false,
        "has": map[string]interface{} {
            "CORS": nil,
            "spot": true,
            "margin": false,
            "swap": false,
            "future": false,
            "option": false,
            "addMargin": false,
            "cancelAllOrders": false,
            "cancelOrder": false,
            "cancelOrders": false,
            "createDepositAddress": false,
            "createOrder": false,
            "createStopLimitOrder": false,
            "createStopMarketOrder": false,
            "createStopOrder": false,
            "editOrder": false,
            "fetchBalance": false,
            "fetchBorrowInterest": false,
            "fetchBorrowRateHistories": false,
            "fetchBorrowRateHistory": false,
            "fetchClosedOrders": false,
            "fetchCrossBorrowRate": false,
            "fetchCrossBorrowRates": false,
            "fetchCurrencies": false,
            "fetchDepositAddress": false,
            "fetchDeposits": false,
            "fetchFundingHistory": false,
            "fetchFundingRate": false,
            "fetchFundingRateHistory": false,
            "fetchFundingRates": false,
            "fetchIndexOHLCV": false,
            "fetchIsolatedBorrowRate": false,
            "fetchIsolatedBorrowRates": false,
            "fetchL2OrderBook": false,
            "fetchL3OrderBook": false,
            "fetchLedger": false,
            "fetchLedgerEntry": false,
            "fetchLeverageTiers": false,
            "fetchMarkets": true,
            "fetchMarkOHLCV": false,
            "fetchMyTrades": false,
            "fetchOHLCV": false,
            "fetchOpenInterestHistory": false,
            "fetchOpenOrders": false,
            "fetchOrder": false,
            "fetchOrderBook": false,
            "fetchOrders": false,
            "fetchOrderTrades": "emulated",
            "fetchPositions": false,
            "fetchPremiumIndexOHLCV": false,
            "fetchTicker": true,
            "fetchTickers": true,
            "fetchTime": false,
            "fetchTrades": false,
            "fetchTradingFee": false,
            "fetchTradingFees": false,
            "fetchWithdrawals": false,
            "setLeverage": false,
            "setMarginMode": false,
            "transfer": false,
            "withdraw": false,
        },
        "comment": "This comment is optional",
        "urls": map[string]interface{} {
            "logo": "https://cdn.arz.digital/cr-odin/img/exchanges/sarmayex/64x64.png",
            "api": map[string]interface{} {
                "public": "https://api.sarmayex.com",
            },
            "www": "https://sarmayex.com",
            "doc": []interface{}{"https://sarmayex.com"},
        },
        "api": map[string]interface{} {
            "public": map[string]interface{} {
                "get": map[string]interface{} {
                    "api/v1/public/currencies": 1,
                },
            },
        },
        "fees": map[string]interface{} {
            "trading": map[string]interface{} {
                "tierBased": false,
                "percentage": true,
                "maker": this.ParseNumber("0.001"),
                "taker": this.ParseNumber("0.001"),
            },
        },
    })
}
func  (this *sarmayex) FetchMarkets(optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name sarmayex#fetchMarkets
            * @description retrieves data on all markets for sarmayex
            * @see https://api.sarmayex.com/api/v1/public/currencies
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object[]} an array of objects representing market data
            */
            params := GetArg(optionalArgs, 0, map[string]interface{} {})
            _ = params
        
            response:= (<-this.PublicGetApiV1PublicCurrencies(params))
            PanicOnError(response)
            response = this.SafeDict(response, "data")
            var markets interface{} = this.SafeList(response, "currencies")
            var result interface{} = []interface{}{}
            var quotes interface{} = []interface{}{"IRT", "USDT"}
            for i := 0; IsLessThan(i, GetArrayLength(markets)); i++ {
                var base interface{} = this.SafeString(GetValue(markets, i), "symbol")
                for index := 0; IsLessThan(index, GetArrayLength(quotes)); index++ {
                    var quote interface{} = GetValue(quotes, index)
                    AddElementToObject(GetValue(markets, i), "base", base)
                    AddElementToObject(GetValue(markets, i), "quote", quote)
                    if IsTrue(IsEqual(base, quote)) {
                        continue
                    }
                    var market interface{} = this.ParseMarket(GetValue(markets, i))
                    AppendToArray(&result, market)
                }
            }
        
            ch <- result
            return nil
        
            }()
            return ch
        }
func  (this *sarmayex) ParseMarket(market interface{}) interface{}  {
    //   {
    //     'id': 87,
    //     'title': 'تتر',
    //     'title_en': 'Tether',
    //     'symbol': 'USDT',
    //     'sell_price': '58,987',
    //     'sell_price_usd': '1.0000',
    //     'sell_price_wm': '1.062',
    //     'sell_price_pm': '1.085',
    //     'can_sell': 1,
    //     'can_sell_iw': 1,
    //     'can_buy': 1,
    //     'can_buy_iw': 1,
    //     'buy_price': '58,448',
    //     'min_buy': '0.00000000',
    //     'max_buy': '232348196.00000000',
    //     'percent_change_1h': 0.00495761,
    //     'percent_change_24h': 0.0333481,
    //     'percent_change_7d': 0.0540622,
    //     'tick': 4,
    //     'need_tag': 0,
    //     'need_address': 1,
    //     'use_copon': 1,
    //     'updated_at': 1717936143,
    //     'image': '',
    //     'has_content': 1,
    //     'withdraw_nets': [],
    //     'deposit_nets': [],
    //     'sell_request_gateway': 1,
    //     'exist_in_wallet': 1,
    //     'tags': [
    //         {
    //             'id': 3,
    //             'name': 'استیبل کوین',
    //         },
    //         {
    //             'id': 13,
    //             'name': 'قابل پرداخت',
    //         },
    //     ],
    // };
    var baseId interface{} = this.SafeString(market, "base")
    var quoteId interface{} = this.SafeString(market, "quote")
    var base interface{} = this.SafeCurrencyCode(baseId)
    var quote interface{} = this.SafeCurrencyCode(quoteId)
    var id interface{} = Add(base, quote)
    baseId = ToLower(baseId)
    quoteId = ToLower(quoteId)
    return map[string]interface{} {
        "id": id,
        "symbol": Add(Add(base, "/"), quote),
        "base": base,
        "quote": quote,
        "settle": nil,
        "baseId": baseId,
        "quoteId": quoteId,
        "settleId": nil,
        "type": "spot",
        "spot": true,
        "margin": false,
        "swap": false,
        "future": false,
        "option": false,
        "active": true,
        "contract": false,
        "linear": nil,
        "inverse": nil,
        "contractSize": nil,
        "expiry": nil,
        "expiryDatetime": nil,
        "strike": nil,
        "optionType": nil,
        "precision": map[string]interface{} {
            "amount": nil,
            "price": nil,
        },
        "limits": map[string]interface{} {
            "leverage": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "amount": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "price": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "cost": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
        },
        "created": nil,
        "info": market,
    }
}
func  (this *sarmayex) FetchTickers(optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name sarmayex#fetchTickers
            * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
            * @see https://api.sarmayex.com/api/v1/public/currencies
            * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
            */
            symbols := GetArg(optionalArgs, 0, nil)
            _ = symbols
            params := GetArg(optionalArgs, 1, map[string]interface{} {})
            _ = params
        
            retRes2558 := (<-this.LoadMarkets())
            PanicOnError(retRes2558)
            if IsTrue(!IsEqual(symbols, nil)) {
                symbols = this.MarketSymbols(symbols)
            }
        
            response:= (<-this.PublicGetApiV1PublicCurrencies(params))
            PanicOnError(response)
            response = this.SafeDict(response, "data")
            var markets interface{} = this.SafeList(response, "currencies")
            var result interface{} = []interface{}{}
            var quotes interface{} = []interface{}{"IRT", "USDT"}
            for i := 0; IsLessThan(i, GetArrayLength(markets)); i++ {
                var base interface{} = this.SafeString(GetValue(markets, i), "symbol")
                for index := 0; IsLessThan(index, GetArrayLength(quotes)); index++ {
                    var quote interface{} = GetValue(quotes, index)
                    if IsTrue(IsEqual(base, quote)) {
                        continue
                    }
                    AddElementToObject(GetValue(markets, i), "base", base)
                    AddElementToObject(GetValue(markets, i), "quote", quote)
                    AddElementToObject(GetValue(markets, i), "symbol", Add(base, quote))
                    var ticker interface{} = this.ParseTicker(GetValue(markets, i))
                    var symbol interface{} = GetValue(ticker, "symbol")
                    AddElementToObject(result, symbol, ticker)
                }
            }
        
            ch <- this.FilterByArrayTickers(result, "symbol", symbols)
            return nil
        
            }()
            return ch
        }
func  (this *sarmayex) FetchTicker(symbol interface{}, optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name sarmayex#fetchTicker
            * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
            * @see https://api.sarmayex.com/api/v1/public/currencies
            * @param {string} symbol unified symbol of the market to fetch the ticker for
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
            */
            params := GetArg(optionalArgs, 0, map[string]interface{} {})
            _ = params
        
            ticker:= (<-this.FetchTickers([]interface{}{symbol}))
            PanicOnError(ticker)
        
            ch <- GetValue(ticker, symbol)
            return nil
        
            }()
            return ch
        }
func  (this *sarmayex) ParseTicker(ticker interface{}, optionalArgs ...interface{}) interface{}  {
    //   {
    //     'id': 87,
    //     'title': 'تتر',
    //     'title_en': 'Tether',
    //     'symbol': 'USDT',
    //     'sell_price': '58,987',
    //     'sell_price_usd': '1.0000',
    //     'sell_price_wm': '1.062',
    //     'sell_price_pm': '1.085',
    //     'can_sell': 1,
    //     'can_sell_iw': 1,
    //     'can_buy': 1,
    //     'can_buy_iw': 1,
    //     'buy_price': '58,448',
    //     'min_buy': '0.00000000',
    //     'max_buy': '232348196.00000000',
    //     'percent_change_1h': 0.00495761,
    //     'percent_change_24h': 0.0333481,
    //     'percent_change_7d': 0.0540622,
    //     'tick': 4,
    //     'need_tag': 0,
    //     'need_address': 1,
    //     'use_copon': 1,
    //     'updated_at': 1717936143,
    //     'image': '',
    //     'has_content': 1,
    //     'withdraw_nets': [],
    //     'deposit_nets': [],
    //     'sell_request_gateway': 1,
    //     'exist_in_wallet': 1,
    //     'tags': [
    //         {
    //             'id': 3,
    //             'name': 'استیبل کوین',
    //         },
    //         {
    //             'id': 13,
    //             'name': 'قابل پرداخت',
    //         },
    //     ],
    // };
    market := GetArg(optionalArgs, 0, nil)
    _ = market
    var marketType interface{} = "otc"
    var marketId interface{} = this.SafeString(ticker, "symbol")
    var symbol interface{} = this.SafeSymbol(marketId, market, nil, marketType)
    AddElementToObject(ticker, "sell_price", Replace(GetValue(ticker, "sell_price"), ",", ""))
    AddElementToObject(ticker, "sell_price_usd", Replace(GetValue(ticker, "sell_price"), ",", ""))
    AddElementToObject(ticker, "buy_price", Replace(GetValue(ticker, "sell_price"), ",", ""))
    var last interface{} = this.SafeFloat(ticker, "sell_price_usd", 0)
    if IsTrue(IsEqual(GetValue(ticker, "quote"), "IRT")) {
        last = this.SafeFloat(ticker, "sell_price", 0)
    }
    var change interface{} = this.SafeFloat(ticker, "percent_change_24h", 0)
    var timestamp interface{} = this.SafeInteger(ticker, "updated_at")
    return this.SafeTicker(map[string]interface{} {
        "symbol": symbol,
        "timestamp": Multiply(timestamp, 1000),
        "datetime": this.Iso8601(Multiply(timestamp, 1000)),
        "high": nil,
        "low": nil,
        "bid": nil,
        "bidVolume": nil,
        "ask": nil,
        "askVolume": nil,
        "vwap": nil,
        "open": nil,
        "close": last,
        "last": last,
        "previousClose": nil,
        "change": change,
        "percentage": nil,
        "average": nil,
        "baseVolume": nil,
        "quoteVolume": nil,
        "info": ticker,
    }, market)
}
func  (this *sarmayex) Sign(path interface{}, optionalArgs ...interface{}) interface{}  {
    api := GetArg(optionalArgs, 0, "public")
    _ = api
    method := GetArg(optionalArgs, 1, "GET")
    _ = method
    params := GetArg(optionalArgs, 2, map[string]interface{} {})
    _ = params
    headers := GetArg(optionalArgs, 3, nil)
    _ = headers
    body := GetArg(optionalArgs, 4, nil)
    _ = body
    var url interface{} = Add(Add(GetValue(GetValue(this.Urls, "api"), "public"), "/"), path)
    headers = map[string]interface{} {
        "Content-Type": "application/json",
    }
    return map[string]interface{} {
        "url": url,
        "method": method,
        "body": body,
        "headers": headers,
    }
}


func (this *sarmayex) Init(userConfig map[string]interface{}) {
    this.Exchange = Exchange{}
    this.Exchange.DerivedExchange = this
    this.Exchange.InitParent(userConfig, this.Describe().(map[string]interface{}), this)
}
