package ccxt

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

type bit24 struct {
    Exchange

}

func NewBit24Core() *bit24 {
    p := &bit24{}
    setDefaults(p)
    return p
}

func  (this *bit24) Describe() interface{}  {
    return this.DeepExtend(this.Exchange.Describe(), map[string]interface{} {
        "id": "bit24",
        "name": "Bit24",
        "countries": []interface{}{"IR"},
        "rateLimit": 1000,
        "version": "1",
        "certified": false,
        "pro": false,
        "has": map[string]interface{} {
            "CORS": nil,
            "spot": true,
            "margin": false,
            "swap": false,
            "future": false,
            "option": false,
            "addMargin": false,
            "cancelAllOrders": false,
            "cancelOrder": false,
            "cancelOrders": false,
            "createDepositAddress": false,
            "createOrder": false,
            "createStopLimitOrder": false,
            "createStopMarketOrder": false,
            "createStopOrder": false,
            "editOrder": false,
            "fetchBalance": false,
            "fetchBorrowInterest": false,
            "fetchBorrowRateHistories": false,
            "fetchBorrowRateHistory": false,
            "fetchClosedOrders": false,
            "fetchCrossBorrowRate": false,
            "fetchCrossBorrowRates": false,
            "fetchCurrencies": false,
            "fetchDepositAddress": false,
            "fetchDeposits": false,
            "fetchFundingHistory": false,
            "fetchFundingRate": false,
            "fetchFundingRateHistory": false,
            "fetchFundingRates": false,
            "fetchIndexOHLCV": false,
            "fetchIsolatedBorrowRate": false,
            "fetchIsolatedBorrowRates": false,
            "fetchL2OrderBook": false,
            "fetchL3OrderBook": false,
            "fetchLedger": false,
            "fetchLedgerEntry": false,
            "fetchLeverageTiers": false,
            "fetchMarkets": true,
            "fetchMarkOHLCV": false,
            "fetchMyTrades": false,
            "fetchOHLCV": false,
            "fetchOpenInterestHistory": false,
            "fetchOpenOrders": false,
            "fetchOrder": false,
            "fetchOrderBook": false,
            "fetchOrders": false,
            "fetchOrderTrades": "emulated",
            "fetchPositions": false,
            "fetchPremiumIndexOHLCV": false,
            "fetchTicker": true,
            "fetchTickers": true,
            "fetchTime": false,
            "fetchTrades": false,
            "fetchTradingFee": false,
            "fetchTradingFees": false,
            "fetchWithdrawals": false,
            "setLeverage": false,
            "setMarginMode": false,
            "transfer": false,
            "withdraw": false,
        },
        "comment": "This comment is optional",
        "urls": map[string]interface{} {
            "logo": "https://cdn.arz.digital/cr-odin/img/exchanges/bit24/64x64.png",
            "api": map[string]interface{} {
                "public": "https://bit24.cash/api/",
            },
            "www": "https://bit24.cash/",
            "doc": []interface{}{"https://bit24.cash/"},
        },
        "api": map[string]interface{} {
            "public": map[string]interface{} {
                "get": map[string]interface{} {
                    "pro/v3/markets": 1,
                },
            },
        },
        "fees": map[string]interface{} {},
    })
}
func  (this *bit24) FetchMarkets(optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name bit24#fetchMarkets
            * @description retrieves data on all markets for bit24 with pagination
            * @see https://bit24.cash/api/pro/v3/markets
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object[]} an array of objects representing market data
            */
            params := GetArg(optionalArgs, 0, map[string]interface{} {})
            _ = params
            var result interface{} = []interface{}{}
            var page interface{} = 1
            var limit interface{} = 100 // check Bit24 docs for max allowed per page
            for true {
        
                response:= (<-this.PublicGetProV3Markets(this.Extend(params, map[string]interface{} {
            "page": page,
            "per_page": limit,
        })))
                PanicOnError(response)
                var markets interface{} = this.SafeDict(response, "data")
                var marketList interface{} = this.SafeList(markets, "results", []interface{}{})
                for i := 0; IsLessThan(i, GetArrayLength(marketList)); i++ {
                    var marketdata interface{} = GetValue(marketList, i)
                    var market interface{} = this.ParseMarket(marketdata)
                    AppendToArray(&result, market)
                }
                // stop condition: if fewer results than limit, last page reached
                if IsTrue(IsLessThan(GetArrayLength(marketList), limit)) {
                    break
                }
                page = Add(page, 1)
            }
        
            ch <- result
            return nil
        
            }()
            return ch
        }
func  (this *bit24) ParseMarket(market interface{}) interface{}  {
    // {
    // id: 59,
    // market_name: "FTT/IRT",
    // quote_coin_decimal: 0,
    // base_coin_decimal: 2,
    // each_price: "83669.0000000000000000",
    // is_favorite: false,
    // max_leverage: null,
    // margin_profit_retention_fee: null,
    // margin_order_expire_days: null,
    // max_long_margin_leverage: null,
    // max_short_margin_leverage: null,
    // base_coin: {
    // symbol: "FTT",
    // name: "FTX Token",
    // fa_name: "اف تی ایکس توکن",
    // logo: "https://exchange-storage.bit24.cash/exchange/icons/ftt.png",
    // coin_type: 0
    // },
    // quote_coin: {
    // symbol: "IRT",
    // name: "Toman",
    // fa_name: "تومان",
    // logo: "https://exchange-storage.bit24.cash/exchange/icons/IRT.png",
    // coin_type: 1
    // },
    // margin_order_status: {
    // index: 0,
    // name: "غیرفعال"
    // },
    // bot_order_status: {
    // index: 1,
    // name: "فعال"
    // },
    // market_24h_information: {
    // base_volume: "467.86",
    // quote_volume: "39880070",
    // change_percent: "-1.687",
    // change_amount: "-1436",
    // min_price: "83137",
    // max_price: "87128",
    // first_price: "85105",
    // last_price: "83669"
    // }
    // }
    var base_coin interface{} = this.SafeDict(market, "base_coin")
    var baseId interface{} = this.SafeString(base_coin, "symbol")
    var quote_coin interface{} = this.SafeDict(market, "quote_coin")
    var quoteId interface{} = this.SafeString(quote_coin, "symbol")
    var base interface{} = this.SafeCurrencyCode(baseId)
    var quote interface{} = this.SafeCurrencyCode(quoteId)
    baseId = ToLower(baseId)
    quoteId = ToLower(quoteId)
    var id interface{} = Add(Add(baseId, "-"), quoteId)
    return map[string]interface{} {
        "id": id,
        "symbol": Add(Add(base, "/"), quote),
        "base": base,
        "quote": quote,
        "settle": nil,
        "baseId": baseId,
        "quoteId": quoteId,
        "settleId": nil,
        "type": "spot",
        "spot": true,
        "margin": false,
        "swap": false,
        "future": false,
        "option": false,
        "active": true,
        "contract": false,
        "linear": nil,
        "inverse": nil,
        "contractSize": nil,
        "expiry": nil,
        "expiryDatetime": nil,
        "strike": nil,
        "optionType": nil,
        "precision": map[string]interface{} {
            "amount": nil,
            "price": nil,
        },
        "limits": map[string]interface{} {
            "leverage": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "amount": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "price": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "cost": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
        },
        "created": nil,
        "info": market,
    }
}
func  (this *bit24) FetchTickers(optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name bit24#fetchTickers
            * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
            * @see https://bit24.com/pro/v3/tickers
            * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
            */
            symbols := GetArg(optionalArgs, 0, nil)
            _ = symbols
            params := GetArg(optionalArgs, 1, map[string]interface{} {})
            _ = params
        
            retRes2588 := (<-this.LoadMarkets())
            PanicOnError(retRes2588)
            if IsTrue(!IsEqual(symbols, nil)) {
                symbols = this.MarketSymbols(symbols)
            }
            var page interface{} = 1
            var limit interface{} = 100 // adjust if Bit24 docs show a different default
            var result interface{} = map[string]interface{} {}
            for true {
        
                response:= (<-this.PublicGetProV3Markets(this.Extend(params, map[string]interface{} {
            "page": page,
            "per_page": limit,
        })))
                PanicOnError(response)
                var data interface{} = this.SafeDict(response, "data", map[string]interface{} {})
                var tickerList interface{} = this.SafeList(data, "results", []interface{}{})
                for i := 0; IsLessThan(i, GetArrayLength(tickerList)); i++ {
                    var tickerData interface{} = GetValue(tickerList, i)
                    var ticker interface{} = this.ParseTicker(tickerData)
                    var symbol interface{} = GetValue(ticker, "symbol")
                    AddElementToObject(result, symbol, ticker)
                }
                if IsTrue(IsLessThan(GetArrayLength(tickerList), limit)) {
                    break
                }
                page = Add(page, 1)
            }
        
            ch <- this.FilterByArrayTickers(result, "symbol", symbols)
            return nil
        
            }()
            return ch
        }
func  (this *bit24) FetchTicker(symbol interface{}, optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name bit24#fetchTicker
            * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
            * @see https://bit24.com/management/all-coins/?format=json
            * @param {string} symbol unified symbol of the market to fetch the ticker for
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
            */
            params := GetArg(optionalArgs, 0, map[string]interface{} {})
            _ = params
        
            ticker:= (<-this.FetchTickers([]interface{}{symbol}))
            PanicOnError(ticker)
        
            ch <- GetValue(ticker, symbol)
            return nil
        
            }()
            return ch
        }
func  (this *bit24) ParseTicker(ticker interface{}, optionalArgs ...interface{}) interface{}  {
    // {
    // id: 59,
    // market_name: "FTT/IRT",
    // quote_coin_decimal: 0,
    // base_coin_decimal: 2,
    // each_price: "83669.0000000000000000",
    // is_favorite: false,
    // max_leverage: null,
    // margin_profit_retention_fee: null,
    // margin_order_expire_days: null,
    // max_long_margin_leverage: null,
    // max_short_margin_leverage: null,
    // base_coin: {
    // symbol: "FTT",
    // name: "FTX Token",
    // fa_name: "اف تی ایکس توکن",
    // logo: "https://exchange-storage.bit24.cash/exchange/icons/ftt.png",
    // coin_type: 0
    // },
    // quote_coin: {
    // symbol: "IRT",
    // name: "Toman",
    // fa_name: "تومان",
    // logo: "https://exchange-storage.bit24.cash/exchange/icons/IRT.png",
    // coin_type: 1
    // },
    // margin_order_status: {
    // index: 0,
    // name: "غیرفعال"
    // },
    // bot_order_status: {
    // index: 1,
    // name: "فعال"
    // },
    // market_24h_information: {
    // base_volume: "467.86",
    // quote_volume: "39880070",
    // change_percent: "-1.687",
    // change_amount: "-1436",
    // min_price: "83137",
    // max_price: "87128",
    // first_price: "85105",
    // last_price: "83669"
    // }
    // },
    market := GetArg(optionalArgs, 0, nil)
    _ = market
    var marketType interface{} = "spot"
    var base_coin interface{} = this.SafeDict(ticker, "base_coin", map[string]interface{} {})
    var base_symbol interface{} = ToLower(this.SafeString(base_coin, "symbol"))
    var quote_coin interface{} = this.SafeDict(ticker, "quote_coin", map[string]interface{} {})
    var quote_symbol interface{} = ToLower(this.SafeString(quote_coin, "symbol"))
    var marketId interface{} = Add(Add(base_symbol, "-"), quote_symbol)
    var symbol interface{} = this.SafeSymbol(marketId, market, nil, marketType)
    var last interface{} = this.SafeFloat(ticker, "each_price", 0)
    var markerInfo interface{} = this.SafeDict(ticker, "market_24h_information", map[string]interface{} {})
    var change interface{} = this.SafeFloat(markerInfo, "change_percent", 0)
    var minPrice interface{} = this.SafeFloat(markerInfo, "min_price", 0)
    var maxPrice interface{} = this.SafeFloat(markerInfo, "max_price", 0)
    var baseVolume interface{} = this.SafeFloat(markerInfo, "base_volume", 0)
    var quoteVolume interface{} = this.SafeFloat(markerInfo, "quote_volume", 0)
    return this.SafeTicker(map[string]interface{} {
        "symbol": symbol,
        "timestamp": nil,
        "datetime": nil,
        "high": maxPrice,
        "low": minPrice,
        "bid": nil,
        "bidVolume": nil,
        "ask": nil,
        "askVolume": nil,
        "vwap": nil,
        "open": nil,
        "close": last,
        "last": last,
        "previousClose": nil,
        "change": change,
        "percentage": nil,
        "average": nil,
        "baseVolume": baseVolume,
        "quoteVolume": quoteVolume,
        "info": ticker,
    }, market)
}
func  (this *bit24) Sign(path interface{}, optionalArgs ...interface{}) interface{}  {
    api := GetArg(optionalArgs, 0, "public")
    _ = api
    method := GetArg(optionalArgs, 1, "GET")
    _ = method
    params := GetArg(optionalArgs, 2, map[string]interface{} {})
    _ = params
    headers := GetArg(optionalArgs, 3, nil)
    _ = headers
    body := GetArg(optionalArgs, 4, nil)
    _ = body
    var query interface{} = this.Omit(params, this.ExtractParams(path))
    var url interface{} = Add(Add(GetValue(GetValue(this.Urls, "api"), api), "/"), this.ImplodeParams(path, params))
    if IsTrue(IsGreaterThan(GetArrayLength(ObjectKeys(query)), 0)) {
        var queryString interface{} = this.Urlencode(query)
        url = Add(url, Add("?", queryString))
    }
    headers = map[string]interface{} {
        "Content-Type": "application/json",
    }
    return map[string]interface{} {
        "url": url,
        "method": method,
        "body": body,
        "headers": headers,
    }
}


func (this *bit24) Init(userConfig map[string]interface{}) {
    this.Exchange = Exchange{}
    this.Exchange.DerivedExchange = this
    this.Exchange.InitParent(userConfig, this.Describe().(map[string]interface{}), this)
}
