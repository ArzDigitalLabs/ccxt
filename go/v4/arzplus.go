package ccxt

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

type arzplus struct {
    Exchange

}

func NewArzplusCore() *arzplus {
    p := &arzplus{}
    setDefaults(p)
    return p
}

func  (this *arzplus) Describe() interface{}  {
    return this.DeepExtend(this.Exchange.Describe(), map[string]interface{} {
        "id": "arzplus",
        "name": "Arzplus",
        "countries": []interface{}{"IR"},
        "rateLimit": 1000,
        "version": "1",
        "certified": false,
        "pro": false,
        "has": map[string]interface{} {
            "CORS": nil,
            "spot": true,
            "margin": false,
            "swap": false,
            "future": false,
            "option": false,
            "addMargin": false,
            "cancelAllOrders": false,
            "cancelOrder": false,
            "cancelOrders": false,
            "createDepositAddress": false,
            "createOrder": false,
            "createStopLimitOrder": false,
            "createStopMarketOrder": false,
            "createStopOrder": false,
            "editOrder": false,
            "fetchBalance": false,
            "fetchBorrowInterest": false,
            "fetchBorrowRateHistories": false,
            "fetchBorrowRateHistory": false,
            "fetchClosedOrders": false,
            "fetchCrossBorrowRate": false,
            "fetchCrossBorrowRates": false,
            "fetchCurrencies": false,
            "fetchDepositAddress": false,
            "fetchDeposits": false,
            "fetchFundingHistory": false,
            "fetchFundingRate": false,
            "fetchFundingRateHistory": false,
            "fetchFundingRates": false,
            "fetchIndexOHLCV": false,
            "fetchIsolatedBorrowRate": false,
            "fetchIsolatedBorrowRates": false,
            "fetchL2OrderBook": false,
            "fetchLedger": false,
            "fetchLedgerEntry": false,
            "fetchLeverageTiers": false,
            "fetchMarkets": true,
            "fetchMarkOHLCV": false,
            "fetchMyTrades": false,
            "fetchOHLCV": true,
            "fetchOpenInterestHistory": false,
            "fetchOpenOrders": false,
            "fetchOrder": false,
            "fetchOrderBook": true,
            "fetchOrders": false,
            "fetchOrderTrades": "emulated",
            "fetchPositions": false,
            "fetchPremiumIndexOHLCV": false,
            "fetchTicker": true,
            "fetchTickers": true,
            "fetchTime": false,
            "fetchTrades": false,
            "fetchTradingFee": false,
            "fetchTradingFees": false,
            "fetchWithdrawals": false,
            "setLeverage": false,
            "setMarginMode": false,
            "transfer": false,
            "withdraw": false,
        },
        "comment": "This comment is optional",
        "urls": map[string]interface{} {
            "logo": "https://cdn.arz.digital/cr-odin/img/exchanges/arzplus/64x64.png",
            "api": map[string]interface{} {
                "public": "https://api.arzplus.net",
            },
            "www": "https://arzplus.net",
            "doc": []interface{}{"https://arzplus.net"},
        },
        "timeframes": map[string]interface{} {
            "1h": "60",
            "1d": "1D",
        },
        "api": map[string]interface{} {
            "public": map[string]interface{} {
                "get": map[string]interface{} {
                    "api/v1/market/symbols": 1,
                    "api/v1/market/tradingview/ohlcv": 1,
                    "api/v1/market/depth": 1,
                },
            },
        },
        "fees": map[string]interface{} {
            "trading": map[string]interface{} {
                "tierBased": false,
                "percentage": true,
                "maker": this.ParseNumber("0.001"),
                "taker": this.ParseNumber("0.001"),
            },
        },
    })
}
func  (this *arzplus) FetchMarkets(optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name arzplus#fetchMarkets
            * @description retrieves data on all markets for arzplus
            * @see https://api.arzplus.net/
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object[]} an array of objects representing market data
            */
            params := GetArg(optionalArgs, 0, map[string]interface{} {})
            _ = params
            var request interface{} = map[string]interface{} {
                "stats": "1",
                "enable": "true",
            }
        
            response:= (<-this.PublicGetApiV1MarketSymbols(request))
            PanicOnError(response)
            var result interface{} = []interface{}{}
            for i := 0; IsLessThan(i, GetArrayLength(response)); i++ {
                var market interface{} = this.ParseMarket(GetValue(response, i))
                AppendToArray(&result, market)
            }
        
            ch <- result
            return nil
        
            }()
            return ch
        }
func  (this *arzplus) ParseMarket(market interface{}) interface{}  {
    // {
    //     'name': 'USDTIRT',
    //     'asset': {
    //         'id': 2,
    //         'symbol': 'USDT',
    //         'precision': 8,
    //         'step_size': 8,
    //         'name': 'tether',
    //         'name_fa': 'تتر',
    //         'logo': 'https://cdn.arzplus.net/core-static/coins/USDT.png',
    //         'original_symbol': 'USDT',
    //         'original_name_fa': 'تتر',
    //         'trading_view_symbol': '',
    //     },
    //     'base_asset': {
    //         'id': 1,
    //         'symbol': 'IRT',
    //         'precision': 0,
    //         'step_size': 8,
    //         'name': 'toman',
    //         'name_fa': 'تومان',
    //         'logo': 'https://cdn.arzplus.net/core-static/coins/IRT.png',
    //         'original_symbol': 'IRT',
    //         'original_name_fa': 'تومان',
    //         'trading_view_symbol': '',
    //     },
    //     'enable': true,
    //     'price': '59165',
    //     'change': '-246',
    //     'change_percent': '-0.41',
    //     'high': '59619',
    //     'low': '58750',
    //     'volume': '215768.82',
    //     'base_volume': '12757163742',
    //     'bookmark': true,
    // };
    var id interface{} = this.SafeString(market, "name")
    var baseAsset interface{} = this.SafeDict(market, "asset")
    var quoteAsset interface{} = this.SafeDict(market, "base_asset")
    var baseId interface{} = this.SafeString(baseAsset, "symbol")
    var quoteId interface{} = this.SafeString(quoteAsset, "symbol")
    var base interface{} = this.SafeCurrencyCode(baseId)
    var quote interface{} = this.SafeCurrencyCode(quoteId)
    baseId = ToLower(baseId)
    quoteId = ToLower(quoteId)
    return map[string]interface{} {
        "id": id,
        "symbol": Add(Add(base, "/"), quote),
        "base": base,
        "quote": quote,
        "settle": nil,
        "baseId": baseId,
        "quoteId": quoteId,
        "settleId": nil,
        "type": "spot",
        "spot": true,
        "margin": false,
        "swap": false,
        "future": false,
        "option": false,
        "active": true,
        "contract": false,
        "linear": nil,
        "inverse": nil,
        "contractSize": nil,
        "expiry": nil,
        "expiryDatetime": nil,
        "strike": nil,
        "optionType": nil,
        "precision": map[string]interface{} {
            "amount": nil,
            "price": nil,
        },
        "limits": map[string]interface{} {
            "leverage": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "amount": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "price": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
            "cost": map[string]interface{} {
                "min": nil,
                "max": nil,
            },
        },
        "created": nil,
        "info": market,
    }
}
func  (this *arzplus) FetchTickers(optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name arzplus#fetchTickers
            * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
            * @see https://api.arzplus.net/
            * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
            */
            symbols := GetArg(optionalArgs, 0, nil)
            _ = symbols
            params := GetArg(optionalArgs, 1, map[string]interface{} {})
            _ = params
        
            retRes2498 := (<-this.LoadMarkets())
            PanicOnError(retRes2498)
            if IsTrue(!IsEqual(symbols, nil)) {
                symbols = this.MarketSymbols(symbols)
            }
        
            response:= (<-this.PublicGetApiV1MarketSymbols(params))
            PanicOnError(response)
            var result interface{} = map[string]interface{} {}
            for i := 0; IsLessThan(i, GetArrayLength(response)); i++ {
                var request interface{} = map[string]interface{} {
                    "symbol": GetValue(GetValue(response, i), "name"),
                }
        
                assetDetails:= (<-this.PublicGetApiV1MarketSymbols(request))
                PanicOnError(assetDetails)
                var ticker interface{} = this.ParseTicker(assetDetails)
                var symbol interface{} = GetValue(ticker, "symbol")
                AddElementToObject(result, symbol, ticker)
            }
        
            ch <- this.FilterByArrayTickers(result, "symbol", symbols)
            return nil
        
            }()
            return ch
        }
func  (this *arzplus) FetchTicker(symbol interface{}, optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name arzplus#fetchTicker
            * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
            * @see https://api.arzplus.net/
            * @param {string} symbol unified symbol of the market to fetch the ticker for
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
            */
            params := GetArg(optionalArgs, 0, map[string]interface{} {})
            _ = params
        
            retRes2778 := (<-this.LoadMarkets())
            PanicOnError(retRes2778)
            var market interface{} = this.Market(symbol)
            var request interface{} = map[string]interface{} {
                "symbol": GetValue(market, "id"),
            }
        
            response:= (<-this.PublicGetApiV1MarketSymbols(request))
            PanicOnError(response)
            var ticker interface{} = this.ParseTicker(response)
        
            ch <- ticker
            return nil
        
            }()
            return ch
        }
func  (this *arzplus) ParseTicker(ticker interface{}, optionalArgs ...interface{}) interface{}  {
    // {
    //     'name': 'USDTIRT',
    //     'asset': {
    //         'id': 2,
    //         'symbol': 'USDT',
    //         'precision': 8,
    //         'step_size': 8,
    //         'name': 'tether',
    //         'name_fa': 'تتر',
    //         'logo': 'https://cdn.arzplus.net/core-static/coins/USDT.png',
    //         'original_symbol': 'USDT',
    //         'original_name_fa': 'تتر',
    //         'trading_view_symbol': '',
    //     },
    //     'base_asset': {
    //         'id': 1,
    //         'symbol': 'IRT',
    //         'precision': 0,
    //         'step_size': 8,
    //         'name': 'toman',
    //         'name_fa': 'تومان',
    //         'logo': 'https://cdn.arzplus.net/core-static/coins/IRT.png',
    //         'original_symbol': 'IRT',
    //         'original_name_fa': 'تومان',
    //         'trading_view_symbol': '',
    //     },
    //     'enable': true,
    //     'price': '59165',
    //     'change': '-246',
    //     'change_percent': '-0.41',
    //     'high': '59619',
    //     'low': '58750',
    //     'volume': '215768.82',
    //     'base_volume': '12757163742',
    //     'bookmark': true,
    // };
    market := GetArg(optionalArgs, 0, nil)
    _ = market
    var marketType interface{} = "spot"
    var marketId interface{} = this.SafeString(ticker, "name")
    var symbol interface{} = this.SafeSymbol(marketId, market, nil, marketType)
    var high interface{} = this.SafeFloat(ticker, "high", 0)
    var low interface{} = this.SafeFloat(ticker, "low", 0)
    var last interface{} = this.SafeFloat(ticker, "price", 0)
    var change interface{} = this.SafeFloat(ticker, "change_percent", 0)
    var baseVolume interface{} = this.SafeFloat(ticker, "volume", 0)
    var quoteVolume interface{} = this.SafeFloat(ticker, "base_volume", 0)
    return this.SafeTicker(map[string]interface{} {
        "symbol": symbol,
        "timestamp": nil,
        "datetime": nil,
        "high": high,
        "low": low,
        "bid": nil,
        "bidVolume": nil,
        "ask": nil,
        "askVolume": nil,
        "vwap": nil,
        "open": last,
        "close": last,
        "last": last,
        "previousClose": nil,
        "change": change,
        "percentage": nil,
        "average": nil,
        "baseVolume": baseVolume,
        "quoteVolume": quoteVolume,
        "info": ticker,
    }, market)
}
func  (this *arzplus) FetchOHLCV(symbol interface{}, optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name arzplus#fetchOHLCV
            * @description fetches historical candlestick data containing the open, high, low, and close price, and the volume of a market
            * @see https://api.arzplus.net/
            * @param {string} symbol unified symbol of the market to fetch OHLCV data for
            * @param {string} timeframe the length of time each candle represents
            * @param {int} [since] timestamp in ms of the earliest candle to fetch
            * @param {int} [limit] the maximum amount of candles to fetch
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {int[][]} A list of candles ordered as timestamp, open, high, low, close, volume
            */
            timeframe := GetArg(optionalArgs, 0, "1h")
            _ = timeframe
            since := GetArg(optionalArgs, 1, nil)
            _ = since
            limit := GetArg(optionalArgs, 2, nil)
            _ = limit
            params := GetArg(optionalArgs, 3, map[string]interface{} {})
            _ = params
        
            retRes3708 := (<-this.LoadMarkets())
            PanicOnError(retRes3708)
            var market interface{} = this.Market(symbol)
            var endTime interface{} = DateNow()
            var request interface{} = map[string]interface{} {
                "symbol": GetValue(market, "id"),
                "from": Subtract((Divide(endTime, 1000)), (Multiply(Multiply(24, 60), 60))),
                "to": Divide(endTime, 1000),
                "resolution": this.SafeString(this.Timeframes, timeframe, timeframe),
                "countBack": 300,
            }
            if IsTrue(!IsEqual(since, nil)) {
                AddElementToObject(request, "from", Divide(since, 1000))
            }
            if IsTrue(!IsEqual(limit, nil)) {
                AddElementToObject(request, "countBack", limit)
            }
            if IsTrue(!IsEqual(timeframe, nil)) {
                AddElementToObject(request, "resolution", this.SafeString(this.Timeframes, timeframe, timeframe))
            }
            AddElementToObject(request, "from", this.SafeInteger(request, "from"))
            AddElementToObject(request, "to", this.SafeInteger(request, "to"))
        
            response:= (<-this.PublicGetApiV1MarketTradingviewOhlcv(request))
            PanicOnError(response)
            var ohlcvs interface{} = []interface{}{}
            for i := 0; IsLessThan(i, GetArrayLength(response)); i++ {
                AppendToArray(&ohlcvs, []interface{}{this.SafeValue(GetValue(response, i), "time"), this.SafeValue(GetValue(response, i), "open"), this.SafeValue(GetValue(response, i), "high"), this.SafeValue(GetValue(response, i), "low"), this.SafeValue(GetValue(response, i), "close"), this.SafeValue(GetValue(response, i), "volume")})
            }
        
            ch <- this.ParseOHLCVs(ohlcvs, market, timeframe, since, limit)
            return nil
        
            }()
            return ch
        }
func  (this *arzplus) FetchOrderBook(symbol interface{}, optionalArgs ...interface{}) <- chan interface{} {
            ch := make(chan interface{})
            go func() interface{} {
                defer close(ch)
                defer ReturnPanicError(ch)
                    /**
            * @method
            * @name arzplus#fetchOrderBooks
            * @description fetches information on open orders with bid (buy) and ask (sell) prices, volumes and other data for multiple markets
            * @see https://api.arzplus.net/
            * @param {string[]|undefined} symbols list of unified market symbols, all symbols fetched if undefined, default is undefined
            * @param {int} [limit] max number of entries per orderbook to return, default is undefined
            * @param {object} [params] extra parameters specific to the exchange API endpoint
            * @returns {object} a dictionary of [order book structures]{@link https://docs.ccxt.com/#/?id=order-book-structure} indexed by market symbol
            */
            limit := GetArg(optionalArgs, 0, nil)
            _ = limit
            params := GetArg(optionalArgs, 1, map[string]interface{} {})
            _ = params
        
            retRes4178 := (<-this.LoadMarkets())
            PanicOnError(retRes4178)
            var market interface{} = this.Market(symbol)
            var request interface{} = map[string]interface{} {
                "symbol": GetValue(market, "id"),
            }
        
            orderBook:= (<-this.PublicGetApiV1MarketDepth(request))
            PanicOnError(orderBook)
            var timestamp interface{} = DateNow()
        
            ch <- this.ParseOrderBook(orderBook, symbol, timestamp, "bids", "asks", "price", "amount")
            return nil
        
            }()
            return ch
        }
func  (this *arzplus) Sign(path interface{}, optionalArgs ...interface{}) interface{}  {
    api := GetArg(optionalArgs, 0, "public")
    _ = api
    method := GetArg(optionalArgs, 1, "GET")
    _ = method
    params := GetArg(optionalArgs, 2, map[string]interface{} {})
    _ = params
    headers := GetArg(optionalArgs, 3, nil)
    _ = headers
    body := GetArg(optionalArgs, 4, nil)
    _ = body
    var query interface{} = this.Omit(params, this.ExtractParams(path))
    var url interface{} = Add(Add(GetValue(GetValue(this.Urls, "api"), "public"), "/"), path)
    if IsTrue(!IsEqual(GetValue(params, "stats"), nil)) {
        url = Add(Add(url, "?"), this.Urlencode(query))
    }
    if IsTrue(IsEqual(path, "api/v1/market/tradingview/ohlcv")) {
        url = Add(Add(url, "?"), this.Urlencode(query))
    } else if IsTrue(!IsEqual(GetValue(params, "symbol"), nil)) {
        url = Add(Add(url, "/"), GetValue(params, "symbol"))
    }
    headers = map[string]interface{} {
        "Content-Type": "application/json",
    }
    return map[string]interface{} {
        "url": url,
        "method": method,
        "body": body,
        "headers": headers,
    }
}


func (this *arzplus) Init(userConfig map[string]interface{}) {
    this.Exchange = Exchange{}
    this.Exchange.DerivedExchange = this
    this.Exchange.InitParent(userConfig, this.Describe().(map[string]interface{}), this)
}
