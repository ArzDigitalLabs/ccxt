// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

//  ---------------------------------------------------------------------------
import Exchange from './abstract/cafearz.js';
//  ---------------------------------------------------------------------------
/**
 * @class cafearz
 * @augments Exchange
 * @description Set rateLimit to 1000 if fully verified
 */
export default class cafearz extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'cafearz',
            'name': 'Cafearz',
            'countries': ['IR'],
            'rateLimit': 1000,
            'version': '1',
            'certified': false,
            'pro': false,
            'has': {
                'CORS': undefined,
                'spot': false,
                'otc': true,
                'margin': false,
                'swap': false,
                'future': false,
                'option': false,
                'addMargin': false,
                'cancelAllOrders': false,
                'cancelOrder': false,
                'cancelOrders': false,
                'createDepositAddress': false,
                'createOrder': false,
                'createStopLimitOrder': false,
                'createStopMarketOrder': false,
                'createStopOrder': false,
                'editOrder': false,
                'fetchBalance': false,
                'fetchBorrowInterest': false,
                'fetchBorrowRateHistories': false,
                'fetchBorrowRateHistory': false,
                'fetchClosedOrders': false,
                'fetchCrossBorrowRate': false,
                'fetchCrossBorrowRates': false,
                'fetchCurrencies': false,
                'fetchDepositAddress': false,
                'fetchDeposits': false,
                'fetchFundingHistory': false,
                'fetchFundingRate': false,
                'fetchFundingRateHistory': false,
                'fetchFundingRates': false,
                'fetchIndexOHLCV': false,
                'fetchIsolatedBorrowRate': false,
                'fetchIsolatedBorrowRates': false,
                'fetchL2OrderBook': false,
                'fetchL3OrderBook': false,
                'fetchLedger': false,
                'fetchLedgerEntry': false,
                'fetchLeverageTiers': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': false,
                'fetchOHLCV': false,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrders': false,
                'fetchOrder': false,
                'fetchOrderBook': false,
                'fetchOrders': false,
                'fetchOrderTrades': 'emulated',
                'fetchPositions': false,
                'fetchPremiumIndexOHLCV': false,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': false,
                'fetchTrades': false,
                'fetchTradingFee': false,
                'fetchTradingFees': false,
                'fetchWithdrawals': false,
                'setLeverage': false,
                'setMarginMode': false,
                'transfer': false,
                'withdraw': false,
            },
            'comment': 'This comment is optional',
            'urls': {
                'logo': 'https://cdn.arz.digital/cr-odin/img/exchanges/cafearz/64x64.png',
                'api': {
                    'public': 'https://api2.cafearz.com',
                },
                'www': 'https://cafearz.com/',
                'doc': [
                    'https://cafearz.com/',
                ],
            },
            'api': {
                'public': {
                    'get': {
                        '/api/client/v1/currencies/prices/digital': 1,
                    },
                },
            },
            'fees': {
                'trading': {
                    'tierBased': false,
                    'percentage': true,
                    'maker': this.parseNumber('0.001'),
                    'taker': this.parseNumber('0.001'),
                },
            },
        });
    }
    parseMarket(market) {
        // {
        //     "symbol": "BTC",
        //     "name": "Bitcoin",
        //     "title": "بیت کوین",
        //     "service_id": 14,
        //     "rank": 1,
        //     "price": {
        //         "buy": 12726581792.3999996185302734375,
        //         "sell": 12571941095.936672210693359375,
        //         "dollar": 110387.5599999999976716935634613037109375
        //     },
        //     "chart": {
        //         "changes": "down",
        //         "changes_percentage": 107.0799999999999982946974341757595539093017578125,
        //         "data": {
        //             "1404/07/05": "109643.46000000",
        //             "1404/07/06": "109635.85000000",
        //             "1404/07/07": "112163.95000000",
        //             "1404/07/08": "114311.96000000",
        //             "1404/07/09": "114048.93000000",
        //             "1404/07/10": "118594.99000000",
        //             "1404/07/11": "120529.35000000",
        //             "1404/07/12": "122232.00000000",
        //             "1404/07/13": "122391.00000000",
        //             "1404/07/14": "123482.31000000",
        //             "1404/07/15": "124658.54000000",
        //             "1404/07/16": "121332.95000000",
        //             "1404/07/17": "123306.00000000",
        //             "1404/07/18": "121662.40000000",
        //             "1404/07/19": "113613.18000000"
        //         }
        //     },
        //     "decimal_digit": "5",
        //     "market_cap": 2018807729876.182861328125,
        //     "volume_24h": 57479298399.76000213623046875,
        //     "percent_change_1h": 0.00643466000000000003244959856374407536350190639495849609375,
        //     "percent_change_24h": -3.013435680000000171929741554777137935161590576171875,
        //     "percent_change_7d": -3.848675339999999778228811919689178466796875,
        //     "base_icon": "https://api2.cafearz.com/assets/images/coins/1.png",
        //     "icon": "https://storage.cafearz.com/wp-content/uploads/coins/BTC.png"
        // },
        const baseId = this.safeString(market, 'symbol');
        const quoteId = 'IRT';
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        const id = baseId + '/' + quoteId;
        return {
            'id': id,
            'symbol': base + '/' + quote,
            'base': base,
            'quote': quote,
            'settle': undefined,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': undefined,
            'type': 'otc',
            'spot': false,
            'margin': false,
            'swap': false,
            'future': false,
            'option': false,
            'active': true,
            'contract': false,
            'linear': undefined,
            'inverse': undefined,
            'contractSize': undefined,
            'expiry': undefined,
            'expiryDatetime': undefined,
            'strike': undefined,
            'optionType': undefined,
            'precision': {
                'amount': undefined,
                'price': undefined,
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': undefined,
                },
                'amount': {
                    'min': undefined,
                    'max': undefined,
                },
                'price': {
                    'min': undefined,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'created': undefined,
            'info': market,
        };
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name cafearz#fetchMarkets
         * @description retrieves data on all markets for cafearz
         * @see https://api2.cafearz.com/api/client/v1/currencies/prices/digital
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object[]} an array of objects representing market data
         */
        const response = await this.publicGetApiClientV1CurrenciesPricesDigital(params);
        const result = [];
        const prices = this.safeDict(response, 'prices', {});
        const symbols = Object.keys(prices);
        // Create markets for each symbol with IRT quote
        for (let i = 0; i < symbols.length; i++) {
            const market = this.parseMarket(prices[symbols[i]]);
            result.push(market);
        }
        return result;
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name cafearz#fetchTickers
         * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://api2.cafearz.com/api/client/v1/currencies/prices/digital
         * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        if (symbols !== undefined) {
            symbols = this.marketSymbols(symbols);
        }
        const response = await this.publicGetApiClientV1CurrenciesPricesDigital(params);
        const prices = this.safeDict(response, 'prices', {});
        const result = {};
        const coinSymbols = Object.keys(prices);
        for (let i = 0; i < coinSymbols.length; i++) {
            const baseId = coinSymbols[i];
            const coinData = prices[baseId];
            // Create ticker for IRT quote
            const quoteId = 'IRT';
            const base = this.safeCurrencyCode(baseId);
            const quote = this.safeCurrencyCode(quoteId);
            const symbol = base + '/' + quote;
            const ticker = this.extend({
                'symbol': symbol,
                'baseId': baseId,
                'quoteId': quoteId,
                'id': baseId + '/' + quoteId,
            }, coinData);
            result[symbol] = this.parseTicker(ticker);
        }
        return this.filterByArrayTickers(result, 'symbol', symbols);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name cafearz#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://api2.cafearz.com/api/client/v1/currencies/prices/digital
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        const ticker = await this.fetchTickers([symbol]);
        return ticker[symbol];
    }
    parseTicker(ticker, market = undefined) {
        // {
        //     "symbol": "BTC",
        //     "name": "Bitcoin",
        //     "title": "بیت کوین",
        //     "service_id": 14,
        //     "rank": 1,
        //     "price": {
        //         "buy": 13462469875.799999,
        //         "sell": 13298881860,
        //         "dollar": 117689.22
        //     },
        //     "chart": {
        //         "changes": "down",
        //         "changes_percentage": 101.33,
        //         "data": {...}
        //     },
        //     "decimal_digit": "5",
        //     "market_cap": 2018807729876.182861,
        //     "volume_24h": 57479298399.76,
        //     "percent_change_1h": 0.00643466,
        //     "percent_change_24h": -3.013435,
        //     "percent_change_7d": -3.848675,
        //     "base_icon": "...",
        //     "icon": "..."
        // }
        const marketType = 'otc';
        const marketId = this.safeString(ticker, 'id');
        const symbol = this.safeSymbol(marketId, market, undefined, marketType);
        const priceData = this.safeDict(ticker, 'price', {});
        const last = this.safeFloat(priceData, 'buy', 0);
        const bid = this.safeFloat(priceData, 'sell', 0);
        const ask = this.safeFloat(priceData, 'buy', 0);
        const percentage = this.safeFloat(ticker, 'percent_change_24h', 0);
        const baseVolume = this.safeFloat(ticker, 'volume_24h');
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': undefined,
            'datetime': undefined,
            'high': undefined,
            'low': undefined,
            'bid': bid,
            'bidVolume': undefined,
            'ask': ask,
            'askVolume': undefined,
            'vwap': undefined,
            'open': undefined,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': percentage,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': undefined,
            'info': ticker,
        }, market);
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const url = this.urls['api']['public'] + path;
        headers = { 'Content-Type': 'application/json' };
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
}
