// ----------------------------------------------------------------------------

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code
// EDIT THE CORRESPONDENT .ts FILE INSTEAD

//  ---------------------------------------------------------------------------
import Exchange from './abstract/kcex.js';
//  ---------------------------------------------------------------------------
/**
 * @class kcex
 * @augments Exchange
 * @description Set rateLimit to 1000 if fully verified
 */
export default class kcex extends Exchange {
    describe() {
        return this.deepExtend(super.describe(), {
            'id': 'kcex',
            'name': 'Kcex',
            'countries': ['SC'],
            'rateLimit': 1000,
            'version': '1',
            'certified': false,
            'pro': false,
            'has': {
                'CORS': undefined,
                'spot': true,
                'margin': false,
                'swap': false,
                'future': true,
                'option': false,
                'addMargin': false,
                'cancelAllOrders': false,
                'cancelOrder': false,
                'cancelOrders': false,
                'createDepositAddress': false,
                'createOrder': false,
                'createStopLimitOrder': false,
                'createStopMarketOrder': false,
                'createStopOrder': false,
                'editOrder': false,
                'fetchBalance': false,
                'fetchBorrowInterest': false,
                'fetchBorrowRateHistories': false,
                'fetchBorrowRateHistory': false,
                'fetchClosedOrders': false,
                'fetchCrossBorrowRate': false,
                'fetchCrossBorrowRates': false,
                'fetchCurrencies': false,
                'fetchDepositAddress': false,
                'fetchDeposits': false,
                'fetchFundingHistory': false,
                'fetchFundingRate': false,
                'fetchFundingRateHistory': false,
                'fetchFundingRates': false,
                'fetchIndexOHLCV': false,
                'fetchIsolatedBorrowRate': false,
                'fetchIsolatedBorrowRates': false,
                'fetchL2OrderBook': false,
                'fetchL3OrderBook': false,
                'fetchLedger': false,
                'fetchLedgerEntry': false,
                'fetchLeverageTiers': false,
                'fetchMarkets': true,
                'fetchMarkOHLCV': false,
                'fetchMyTrades': false,
                'fetchOHLCV': true,
                'fetchOpenInterestHistory': false,
                'fetchOpenOrders': false,
                'fetchOrder': false,
                'fetchOrderBook': true,
                'fetchOrders': false,
                'fetchOrderTrades': 'emulated',
                'fetchPositions': false,
                'fetchPremiumIndexOHLCV': false,
                'fetchTicker': true,
                'fetchTickers': true,
                'fetchTime': false,
                'fetchTrades': false,
                'fetchTradingFee': false,
                'fetchTradingFees': false,
                'fetchWithdrawals': false,
                'setLeverage': false,
                'setMarginMode': false,
                'transfer': false,
                'withdraw': false,
            },
            'comment': 'This comment is optional',
            'urls': {
                'logo': 'https://cdn.arz.digital/cr-odin/img/exchanges/kcex/64x64.png',
                'api': {
                    'public': 'https://www.kcex.com/spot/api',
                    'futures': 'https://www.kcex.com/fapi/v1',
                },
                'www': 'https://www.kcex.com',
                'doc': [
                    'https://www.kcex.com',
                ],
            },
            'timeframes': {
                '1m': '1',
                '1h': '60',
                '3h': '180',
                '6h': '360',
                '12h': '720',
                '1d': '1D',
            },
            'api': {
                'public': {
                    'get': {
                        'market-2/spot/market/v2/web/symbols': 1,
                        'market-2/spot/market/v2/web/tickers': 1,
                        'market-2/spot/market/v2/web/symbol/ticker': 1,
                    },
                },
                'futures': {
                    'get': {
                        'contract/ticker': 1,
                    },
                },
            },
            // 'fees': {
            //     'trading': {
            //         'tierBased': false,
            //         'percentage': true,
            //         'maker': this.parseNumber ('0.001'),
            //         'taker': this.parseNumber ('0.001'),
            //     },
            // },
        });
    }
    async fetchMarkets(params = {}) {
        /**
         * @method
         * @name kcex#fetchMarkets
         * @description retrieves data on all markets for kcex
         * @see https://api-docs.kcex.ir/#be8d9c51a2
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object[]} an array of objects representing market data
         */
        const response = await this.publicGetMarket2SpotMarketV2WebSymbols(params);
        const futuresResponse = await this.futuresGetContractTicker(params);
        const data = this.safeDict(response, 'data');
        const USDTmarketList = this.safeList(data, 'USDT');
        const USDCmarketList = this.safeList(data, 'USDC');
        const futuresMarketList = this.safeList(futuresResponse, 'data');
        const marketList = this.arrayConcat(USDTmarketList, USDCmarketList);
        const result = [];
        for (let i = 0; i < marketList.length; i++) {
            const market = this.parseSpotMarket(marketList[i]);
            result.push(market);
        }
        for (let i = 0; i < futuresMarketList.length; i++) {
            const market = this.parseFuturesMarket(futuresMarketList[i]);
            result.push(market);
        }
        return result;
    }
    parseSpotMarket(market) {
        //         {
        // id: "e16a2713c7a44bac9d1d4ef98467e75b",
        // mcd: "20f24a571c8544c0b1362794b1804456",
        // mnm: "USDT",
        // cd: "18f40e5428054a4b9c69ddb0cce486f3",
        // vn: "AP",
        // fn: "AMERICA PARTY",
        // srt: 322,
        // sts: 1,
        // in: "F20250607111147267iXgSHIElFbibIQ",
        // fot: 1749247200000,
        // ot: 1749267000000,
        // cp: [
        // "common_section_meme",
        // "common_section_solana"
        // ],
        // ps: 7,
        // qs: 2,
        // cdm: 1
        // }
        const id = this.safeString(market, 'id');
        let baseId = this.safeString(market, 'vn');
        let quoteId = this.safeString(market, 'mnm');
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        baseId = baseId.toLowerCase();
        quoteId = quoteId.toLowerCase();
        return {
            'id': id,
            'symbol': base + '/' + quote,
            'base': base,
            'quote': quote,
            'settle': undefined,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': undefined,
            'type': 'spot',
            'spot': true,
            'margin': false,
            'swap': false,
            'future': false,
            'option': false,
            'active': true,
            'contract': false,
            'linear': undefined,
            'inverse': undefined,
            'contractSize': undefined,
            'expiry': undefined,
            'expiryDatetime': undefined,
            'strike': undefined,
            'optionType': undefined,
            'precision': {
                'amount': undefined,
                'price': undefined,
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': undefined,
                },
                'amount': {
                    'min': undefined,
                    'max': undefined,
                },
                'price': {
                    'min': undefined,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'created': undefined,
            'info': market,
        };
    }
    parseFuturesMarket(market) {
        //         {
        // contractId: 1,
        // symbol: "BTC_USDT",
        // lastPrice: 112000.2,
        // bid1: 112000.1,
        // ask1: 112000.2,
        // volume24: 499700543,
        // amount24: 5543019316.89779,
        // holdVol: 3873397,
        // lower24Price: 109136.5,
        // high24Price: 112381,
        // riseFallRate: 0.0183,
        // riseFallValue: 2014.2,
        // indexPrice: 112059.1,
        // fairPrice: 112000.2,
        // fundingRate: -0.00001,
        // maxBidPrice: 128867.9,
        // minAskPrice: 95250.2,
        // timestamp: 1759139514008,
        // riseFallRates: {
        // zone: "UTC+8",
        // r: 0.0183,
        // v: 2014.2,
        // r7: -0.005,
        // r30: 0.032,
        // r90: 0.05,
        // r180: 0.3235,
        // r365: 0.709
        // },
        // riseFallRatesOfTimezone: [
        // 0.0231,
        // -0.001,
        // 0.0183
        // ]
        // }
        const id = this.safeString(market, 'symbol');
        const symbol = id.split('_');
        const baseId = symbol[0];
        const quoteId = symbol[1];
        const base = this.safeCurrencyCode(baseId);
        const quote = this.safeCurrencyCode(quoteId);
        return {
            'id': id,
            'symbol': base + '/' + quote,
            'base': base,
            'quote': quote,
            'settle': undefined,
            'baseId': baseId,
            'quoteId': quoteId,
            'settleId': undefined,
            'type': 'future',
            'spot': false,
            'margin': false,
            'swap': false,
            'future': true,
            'option': false,
            'active': true,
            'contract': false,
            'linear': undefined,
            'inverse': undefined,
            'contractSize': undefined,
            'expiry': undefined,
            'expiryDatetime': undefined,
            'strike': undefined,
            'optionType': undefined,
            'precision': {
                'amount': undefined,
                'price': undefined,
            },
            'limits': {
                'leverage': {
                    'min': undefined,
                    'max': undefined,
                },
                'amount': {
                    'min': undefined,
                    'max': undefined,
                },
                'price': {
                    'min': undefined,
                    'max': undefined,
                },
                'cost': {
                    'min': undefined,
                    'max': undefined,
                },
            },
            'created': undefined,
            'info': market,
        };
    }
    async fetchTickers(symbols = undefined, params = {}) {
        /**
         * @method
         * @name kcex#fetchTickers
         * @description fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each market
         * @see https://api-docs.kcex.ir/#be8d9c51a2
         * @param {string[]|undefined} symbols unified symbols of the markets to fetch the ticker for, all market tickers are returned if not assigned
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a dictionary of [ticker structures]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        if (symbols !== undefined) {
            symbols = this.marketSymbols(symbols);
        }
        let response = {};
        const result = {};
        if (params['type'] === 'future') {
            response = await this.futuresGetContractTicker(params);
            const futuresTickerData = this.safeList(response, 'data');
            for (let i = 0; i < futuresTickerData.length; i++) {
                const futuresTicker = this.parseFuturesTicker(futuresTickerData[i]);
                const symbol = futuresTicker['symbol'];
                result[symbol] = futuresTicker;
            }
            return this.filterByArrayTickers(result, 'symbol', symbols);
        }
        response = await this.publicGetMarket2SpotMarketV2WebTickers(params);
        const tickers = this.safeList(response, 'data');
        const timestamp = this.safeInteger(response, 'timestamp');
        const idToMarket = {};
        const marketList = Object.values(this.markets);
        for (let i = 0; i < marketList.length; i++) {
            const market = marketList[i];
            idToMarket[market['id']] = market;
        }
        for (let i = 0; i < tickers.length; i++) {
            const ticker = tickers[i];
            const id = this.safeString(ticker, 'id');
            const market = idToMarket[id];
            ticker['timestamp'] = timestamp;
            if (market !== undefined) {
                const parsedTicker = this.parseTicker(ticker, market);
                const symbol = parsedTicker['symbol'];
                result[symbol] = parsedTicker;
            }
        }
        return this.filterByArrayTickers(result, 'symbol', symbols);
    }
    async fetchTicker(symbol, params = {}) {
        /**
         * @method
         * @name kcex#fetchTicker
         * @description fetches a price ticker, a statistical calculation with the information calculated over the past 24 hours for a specific market
         * @see https://api-docs.kcex.ir/#be8d9c51a2
         * @param {string} symbol unified symbol of the market to fetch the ticker for
         * @param {object} [params] extra parameters specific to the exchange API endpoint
         * @returns {object} a [ticker structure]{@link https://docs.ccxt.com/#/?id=ticker-structure}
         */
        await this.loadMarkets();
        const market = this.market(symbol);
        const request = {
            'symbol': market['base'] + '_' + market['quote'],
        };
        let response = {};
        if (params['type'] === 'future') {
            response = await this.futuresGetContractTicker(request);
            const futuresTickerData = this.safeDict(response, 'data');
            const futuresTicker = this.parseFuturesTicker(futuresTickerData);
            return futuresTicker;
        }
        response = await this.publicGetMarket2SpotMarketV2WebSymbolTicker(request);
        const tickerdata = this.safeDict(response, 'data');
        const ticker = this.parseTicker(tickerdata, market);
        return ticker;
    }
    parseTicker(ticker, market = undefined) {
        //         {
        // id: "e16a2713c7a44bac9d1d4ef98467e75b",
        // r8: "-0.0261",
        // tzr: "-0.0261",
        // c: "0.0004552",
        // h: "0.0005745",
        // l: "0.0004552",
        // a: "136545.934217",
        // q: "281221205.24",
        // o: "0.0004674",
        // ot: 1749247200000
        // }
        const symbol = market['symbol'];
        const high = this.safeFloat(ticker, 'h', 0);
        const low = this.safeFloat(ticker, 'l', 0);
        const open = this.safeFloat(ticker, 'o', 0);
        const last = this.safeFloat(ticker, 'c', 0);
        const quoteVolume = this.safeFloat(ticker, 'a', 0);
        const baseVolume = this.safeFloat(ticker, 'q', 0);
        const timestamp = this.safeInteger(ticker, 'timestamp', 0);
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': undefined,
            'bidVolume': undefined,
            'ask': undefined,
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': undefined,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    parseFuturesTicker(ticker, market = undefined) {
        // {
        // contractId: 1,
        // symbol: "BTC_USDT",
        // lastPrice: 112000.2,
        // bid1: 112000.1,
        // ask1: 112000.2,
        // volume24: 499700543,
        // amount24: 5543019316.89779,
        // holdVol: 3873397,
        // lower24Price: 109136.5,
        // high24Price: 112381,
        // riseFallRate: 0.0183,
        // riseFallValue: 2014.2,
        // indexPrice: 112059.1,
        // fairPrice: 112000.2,
        // fundingRate: -0.00001,
        // maxBidPrice: 128867.9,
        // minAskPrice: 95250.2,
        // timestamp: 1759139514008,
        // riseFallRates: {
        // zone: "UTC+8",
        // r: 0.0183,
        // v: 2014.2,
        // r7: -0.005,
        // r30: 0.032,
        // r90: 0.05,
        // r180: 0.3235,
        // r365: 0.709
        // },
        // riseFallRatesOfTimezone: [
        // 0.0231,
        // -0.001,
        // 0.0183
        // ]
        // }
        const symbol = this.safeString(ticker, 'symbol');
        const high = this.safeFloat(ticker, 'high24Price', 0);
        const low = this.safeFloat(ticker, 'low24Price', 0);
        const open = this.safeFloat(ticker, 'open24Price', 0);
        const last = this.safeFloat(ticker, 'lastPrice', 0);
        const bid = this.safeFloat(ticker, 'bid1', 0);
        const ask = this.safeFloat(ticker, 'ask1', 0);
        const quoteVolume = this.safeFloat(ticker, 'amount24', 0);
        const baseVolume = this.safeFloat(ticker, 'volume24', 0);
        const timestamp = this.safeInteger(ticker, 'timestamp', 0);
        const change = this.safeFloat(ticker, 'riseFallRate', 0);
        return this.safeTicker({
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': this.iso8601(timestamp),
            'high': high,
            'low': low,
            'bid': bid,
            'bidVolume': undefined,
            'ask': ask,
            'askVolume': undefined,
            'vwap': undefined,
            'open': open,
            'close': last,
            'last': last,
            'previousClose': undefined,
            'change': change,
            'percentage': undefined,
            'average': undefined,
            'baseVolume': baseVolume,
            'quoteVolume': quoteVolume,
            'info': ticker,
        }, market);
    }
    sign(path, api = 'public', method = 'GET', params = {}, headers = undefined, body = undefined) {
        const query = this.omit(params, this.extractParams(path));
        let url = this.urls['api']['public'] + '/' + path;
        if (path === 'market-2/spot/market/v2/web/symbol/ticker') {
            url = url + '?' + this.urlencode(query);
        }
        if (path === 'contract/ticker') {
            url = this.urls['api']['futures'] + '/' + path;
            url = url + '?' + this.urlencode(query);
        }
        headers = { 'Content-Type': 'application/json' };
        return { 'url': url, 'method': method, 'body': body, 'headers': headers };
    }
}
